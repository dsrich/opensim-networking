use nalgebra::{Vector3, Vector4, Quaternion};
use std::net::Ipv4Addr as IpAddr;

type IpPort = u16;
type LLUUID = u16;

// Don't edit this file manually, it is generated by a script and might be overwritten in the
// future.

pub struct TestMessage_TestBlock1 {
	test1: u32,
}

pub struct TestMessage_NeighborBlock {
	test0: u32,
	test1: u32,
	test2: u32,
}

pub struct TestMessage {
	test_block1: TestMessage_TestBlock1,
	neighbor_block: [TestMessage_NeighborBlock; 4],
}


pub struct PacketAck_Packets {
	id: u32,
}

pub struct PacketAck {
	packets: Vec<PacketAck_Packets>,
}


pub struct OpenCircuit_CircuitInfo {
	ip: IpAddr,
	port: IpPort,
}

pub struct OpenCircuit {
	circuit_info: OpenCircuit_CircuitInfo,
}


pub struct CloseCircuit {
}


pub struct StartPingCheck_PingID {
	ping_id: u8,
	oldest_unacked: u32,
}

pub struct StartPingCheck {
	ping_id: StartPingCheck_PingID,
}


pub struct CompletePingCheck_PingID {
	ping_id: u8,
}

pub struct CompletePingCheck {
	ping_id: CompletePingCheck_PingID,
}


pub struct AddCircuitCode_CircuitCode {
	code: u32,
	session_id: LLUUID,
	agent_id: LLUUID,
}

pub struct AddCircuitCode {
	circuit_code: AddCircuitCode_CircuitCode,
}


pub struct UseCircuitCode_CircuitCode {
	code: u32,
	session_id: LLUUID,
	id: LLUUID,
}

pub struct UseCircuitCode {
	circuit_code: UseCircuitCode_CircuitCode,
}


pub struct NeighborList_NeighborBlock {
	ip: IpAddr,
	port: IpPort,
	public_ip: IpAddr,
	public_port: IpPort,
	region_id: LLUUID,
	name: Vec<u8>,
	sim_access: u8,
}

pub struct NeighborList {
	neighbor_block: [NeighborList_NeighborBlock; 4],
}


pub struct AvatarTextureUpdate_AgentData {
	agent_id: LLUUID,
	textures_changed: bool,
}

pub struct AvatarTextureUpdate_WearableData {
	cache_id: LLUUID,
	texture_index: u8,
	host_name: Vec<u8>,
}

pub struct AvatarTextureUpdate_TextureData {
	texture_id: LLUUID,
}

pub struct AvatarTextureUpdate {
	agent_data: AvatarTextureUpdate_AgentData,
	wearable_data: Vec<AvatarTextureUpdate_WearableData>,
	texture_data: Vec<AvatarTextureUpdate_TextureData>,
}


pub struct SimulatorMapUpdate_MapData {
	flags: u32,
}

pub struct SimulatorMapUpdate {
	map_data: SimulatorMapUpdate_MapData,
}


pub struct SimulatorSetMap_MapData {
	region_handle: u64,
	type_: i32,
	map_image: LLUUID,
}

pub struct SimulatorSetMap {
	map_data: SimulatorSetMap_MapData,
}


pub struct SubscribeLoad {
}


pub struct UnsubscribeLoad {
}


pub struct SimulatorReady_SimulatorBlock {
	sim_name: Vec<u8>,
	sim_access: u8,
	region_flags: u32,
	region_id: LLUUID,
	estate_id: u32,
	parent_estate_id: u32,
}

pub struct SimulatorReady_TelehubBlock {
	has_telehub: bool,
	telehub_pos: Vector3<f32>,
}

pub struct SimulatorReady {
	simulator_block: SimulatorReady_SimulatorBlock,
	telehub_block: SimulatorReady_TelehubBlock,
}


pub struct TelehubInfo_TelehubBlock {
	object_id: LLUUID,
	object_name: Vec<u8>,
	telehub_pos: Vector3<f32>,
	telehub_rot: Quaternion<f32>,
}

pub struct TelehubInfo_SpawnPointBlock {
	spawn_point_pos: Vector3<f32>,
}

pub struct TelehubInfo {
	telehub_block: TelehubInfo_TelehubBlock,
	spawn_point_block: Vec<TelehubInfo_SpawnPointBlock>,
}


pub struct SimulatorPresentAtLocation_SimulatorPublicHostBlock {
	port: IpPort,
	simulator_ip: IpAddr,
	grid_x: u32,
	grid_y: u32,
}

pub struct SimulatorPresentAtLocation_NeighborBlock {
	ip: IpAddr,
	port: IpPort,
}

pub struct SimulatorPresentAtLocation_SimulatorBlock {
	sim_name: Vec<u8>,
	sim_access: u8,
	region_flags: u32,
	region_id: LLUUID,
	estate_id: u32,
	parent_estate_id: u32,
}

pub struct SimulatorPresentAtLocation_TelehubBlock {
	has_telehub: bool,
	telehub_pos: Vector3<f32>,
}

pub struct SimulatorPresentAtLocation {
	simulator_public_host_block: SimulatorPresentAtLocation_SimulatorPublicHostBlock,
	neighbor_block: [SimulatorPresentAtLocation_NeighborBlock; 4],
	simulator_block: SimulatorPresentAtLocation_SimulatorBlock,
	telehub_block: Vec<SimulatorPresentAtLocation_TelehubBlock>,
}


pub struct SimulatorLoad_SimulatorLoad {
	time_dilation: f32,
	agent_count: i32,
	can_accept_agents: bool,
}

pub struct SimulatorLoad_AgentList {
	circuit_code: u32,
	x: u8,
	y: u8,
}

pub struct SimulatorLoad {
	simulator_load: SimulatorLoad_SimulatorLoad,
	agent_list: Vec<SimulatorLoad_AgentList>,
}


pub struct SimulatorShutdownRequest {
}


pub struct RegionPresenceRequestByRegionID_RegionData {
	region_id: LLUUID,
}

pub struct RegionPresenceRequestByRegionID {
	region_data: Vec<RegionPresenceRequestByRegionID_RegionData>,
}


pub struct RegionPresenceRequestByHandle_RegionData {
	region_handle: u64,
}

pub struct RegionPresenceRequestByHandle {
	region_data: Vec<RegionPresenceRequestByHandle_RegionData>,
}


pub struct RegionPresenceResponse_RegionData {
	region_id: LLUUID,
	region_handle: u64,
	internal_region_ip: IpAddr,
	external_region_ip: IpAddr,
	region_port: IpPort,
	valid_until: f64,
	message: Vec<u8>,
}

pub struct RegionPresenceResponse {
	region_data: Vec<RegionPresenceResponse_RegionData>,
}


pub struct UpdateSimulator_SimulatorInfo {
	region_id: LLUUID,
	sim_name: Vec<u8>,
	estate_id: u32,
	sim_access: u8,
}

pub struct UpdateSimulator {
	simulator_info: UpdateSimulator_SimulatorInfo,
}


pub struct LogDwellTime_DwellInfo {
	agent_id: LLUUID,
	session_id: LLUUID,
	duration: f32,
	sim_name: Vec<u8>,
	region_x: u32,
	region_y: u32,
	avg_agents_in_view: u8,
	avg_viewer_fps: u8,
}

pub struct LogDwellTime {
	dwell_info: LogDwellTime_DwellInfo,
}


pub struct FeatureDisabled_FailureInfo {
	error_message: Vec<u8>,
	agent_id: LLUUID,
	transaction_id: LLUUID,
}

pub struct FeatureDisabled {
	failure_info: FeatureDisabled_FailureInfo,
}


pub struct LogFailedMoneyTransaction_TransactionData {
	transaction_id: LLUUID,
	transaction_time: u32,
	transaction_type: i32,
	source_id: LLUUID,
	dest_id: LLUUID,
	flags: u8,
	amount: i32,
	simulator_ip: IpAddr,
	grid_x: u32,
	grid_y: u32,
	failure_type: u8,
}

pub struct LogFailedMoneyTransaction {
	transaction_data: LogFailedMoneyTransaction_TransactionData,
}


pub struct UserReportInternal_ReportData {
	report_type: u8,
	category: u8,
	reporter_id: LLUUID,
	viewer_position: Vector3<f32>,
	agent_position: Vector3<f32>,
	screenshot_id: LLUUID,
	object_id: LLUUID,
	owner_id: LLUUID,
	last_owner_id: LLUUID,
	creator_id: LLUUID,
	region_id: LLUUID,
	abuser_id: LLUUID,
	abuse_region_name: Vec<u8>,
	abuse_region_id: LLUUID,
	summary: Vec<u8>,
	details: Vec<u8>,
	version_string: Vec<u8>,
}

pub struct UserReportInternal {
	report_data: UserReportInternal_ReportData,
}


pub struct SetSimStatusInDatabase_Data {
	region_id: LLUUID,
	host_name: Vec<u8>,
	x: i32,
	y: i32,
	pid: i32,
	agent_count: i32,
	time_to_live: i32,
	status: Vec<u8>,
}

pub struct SetSimStatusInDatabase {
	data: SetSimStatusInDatabase_Data,
}


pub struct SetSimPresenceInDatabase_SimData {
	region_id: LLUUID,
	host_name: Vec<u8>,
	grid_x: u32,
	grid_y: u32,
	pid: i32,
	agent_count: i32,
	time_to_live: i32,
	status: Vec<u8>,
}

pub struct SetSimPresenceInDatabase {
	sim_data: SetSimPresenceInDatabase_SimData,
}


pub struct EconomyDataRequest {
}


pub struct EconomyData_Info {
	object_capacity: i32,
	object_count: i32,
	price_energy_unit: i32,
	price_object_claim: i32,
	price_public_object_decay: i32,
	price_public_object_delete: i32,
	price_parcel_claim: i32,
	price_parcel_claim_factor: f32,
	price_upload: i32,
	price_rent_light: i32,
	teleport_min_price: i32,
	teleport_price_exponent: f32,
	energy_efficiency: f32,
	price_object_rent: f32,
	price_object_scale_factor: f32,
	price_parcel_rent: i32,
	price_group_create: i32,
}

pub struct EconomyData {
	info: EconomyData_Info,
}


pub struct AvatarPickerRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	query_id: LLUUID,
}

pub struct AvatarPickerRequest_Data {
	name: Vec<u8>,
}

pub struct AvatarPickerRequest {
	agent_data: AvatarPickerRequest_AgentData,
	data: AvatarPickerRequest_Data,
}


pub struct AvatarPickerRequestBackend_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	query_id: LLUUID,
	god_level: u8,
}

pub struct AvatarPickerRequestBackend_Data {
	name: Vec<u8>,
}

pub struct AvatarPickerRequestBackend {
	agent_data: AvatarPickerRequestBackend_AgentData,
	data: AvatarPickerRequestBackend_Data,
}


pub struct AvatarPickerReply_AgentData {
	agent_id: LLUUID,
	query_id: LLUUID,
}

pub struct AvatarPickerReply_Data {
	avatar_id: LLUUID,
	first_name: Vec<u8>,
	last_name: Vec<u8>,
}

pub struct AvatarPickerReply {
	agent_data: AvatarPickerReply_AgentData,
	data: Vec<AvatarPickerReply_Data>,
}


pub struct PlacesQuery_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	query_id: LLUUID,
}

pub struct PlacesQuery_TransactionData {
	transaction_id: LLUUID,
}

pub struct PlacesQuery_QueryData {
	query_text: Vec<u8>,
	query_flags: u32,
	category: i8,
	sim_name: Vec<u8>,
}

pub struct PlacesQuery {
	agent_data: PlacesQuery_AgentData,
	transaction_data: PlacesQuery_TransactionData,
	query_data: PlacesQuery_QueryData,
}


pub struct PlacesReply_AgentData {
	agent_id: LLUUID,
	query_id: LLUUID,
}

pub struct PlacesReply_TransactionData {
	transaction_id: LLUUID,
}

pub struct PlacesReply_QueryData {
	owner_id: LLUUID,
	name: Vec<u8>,
	desc: Vec<u8>,
	actual_area: i32,
	billable_area: i32,
	flags: u8,
	global_x: f32,
	global_y: f32,
	global_z: f32,
	sim_name: Vec<u8>,
	snapshot_id: LLUUID,
	dwell: f32,
	price: i32,
}

pub struct PlacesReply {
	agent_data: PlacesReply_AgentData,
	transaction_data: PlacesReply_TransactionData,
	query_data: Vec<PlacesReply_QueryData>,
}


pub struct DirFindQuery_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct DirFindQuery_QueryData {
	query_id: LLUUID,
	query_text: Vec<u8>,
	query_flags: u32,
	query_start: i32,
}

pub struct DirFindQuery {
	agent_data: DirFindQuery_AgentData,
	query_data: DirFindQuery_QueryData,
}


pub struct DirFindQueryBackend_AgentData {
	agent_id: LLUUID,
}

pub struct DirFindQueryBackend_QueryData {
	query_id: LLUUID,
	query_text: Vec<u8>,
	query_flags: u32,
	query_start: i32,
	estate_id: u32,
	godlike: bool,
}

pub struct DirFindQueryBackend {
	agent_data: DirFindQueryBackend_AgentData,
	query_data: DirFindQueryBackend_QueryData,
}


pub struct DirPlacesQuery_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct DirPlacesQuery_QueryData {
	query_id: LLUUID,
	query_text: Vec<u8>,
	query_flags: u32,
	category: i8,
	sim_name: Vec<u8>,
	query_start: i32,
}

pub struct DirPlacesQuery {
	agent_data: DirPlacesQuery_AgentData,
	query_data: DirPlacesQuery_QueryData,
}


pub struct DirPlacesQueryBackend_AgentData {
	agent_id: LLUUID,
}

pub struct DirPlacesQueryBackend_QueryData {
	query_id: LLUUID,
	query_text: Vec<u8>,
	query_flags: u32,
	category: i8,
	sim_name: Vec<u8>,
	estate_id: u32,
	godlike: bool,
	query_start: i32,
}

pub struct DirPlacesQueryBackend {
	agent_data: DirPlacesQueryBackend_AgentData,
	query_data: DirPlacesQueryBackend_QueryData,
}


pub struct DirPlacesReply_AgentData {
	agent_id: LLUUID,
}

pub struct DirPlacesReply_QueryData {
	query_id: LLUUID,
}

pub struct DirPlacesReply_QueryReplies {
	parcel_id: LLUUID,
	name: Vec<u8>,
	for_sale: bool,
	auction: bool,
	dwell: f32,
}

pub struct DirPlacesReply_StatusData {
	status: u32,
}

pub struct DirPlacesReply {
	agent_data: DirPlacesReply_AgentData,
	query_data: Vec<DirPlacesReply_QueryData>,
	query_replies: Vec<DirPlacesReply_QueryReplies>,
	status_data: Vec<DirPlacesReply_StatusData>,
}


pub struct DirPeopleReply_AgentData {
	agent_id: LLUUID,
}

pub struct DirPeopleReply_QueryData {
	query_id: LLUUID,
}

pub struct DirPeopleReply_QueryReplies {
	agent_id: LLUUID,
	first_name: Vec<u8>,
	last_name: Vec<u8>,
	group: Vec<u8>,
	online: bool,
	reputation: i32,
}

pub struct DirPeopleReply {
	agent_data: DirPeopleReply_AgentData,
	query_data: DirPeopleReply_QueryData,
	query_replies: Vec<DirPeopleReply_QueryReplies>,
}


pub struct DirEventsReply_AgentData {
	agent_id: LLUUID,
}

pub struct DirEventsReply_QueryData {
	query_id: LLUUID,
}

pub struct DirEventsReply_QueryReplies {
	owner_id: LLUUID,
	name: Vec<u8>,
	event_id: u32,
	date: Vec<u8>,
	unix_time: u32,
	event_flags: u32,
}

pub struct DirEventsReply_StatusData {
	status: u32,
}

pub struct DirEventsReply {
	agent_data: DirEventsReply_AgentData,
	query_data: DirEventsReply_QueryData,
	query_replies: Vec<DirEventsReply_QueryReplies>,
	status_data: Vec<DirEventsReply_StatusData>,
}


pub struct DirGroupsReply_AgentData {
	agent_id: LLUUID,
}

pub struct DirGroupsReply_QueryData {
	query_id: LLUUID,
}

pub struct DirGroupsReply_QueryReplies {
	group_id: LLUUID,
	group_name: Vec<u8>,
	members: i32,
	search_order: f32,
}

pub struct DirGroupsReply {
	agent_data: DirGroupsReply_AgentData,
	query_data: DirGroupsReply_QueryData,
	query_replies: Vec<DirGroupsReply_QueryReplies>,
}


pub struct DirClassifiedQuery_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct DirClassifiedQuery_QueryData {
	query_id: LLUUID,
	query_text: Vec<u8>,
	query_flags: u32,
	category: u32,
	query_start: i32,
}

pub struct DirClassifiedQuery {
	agent_data: DirClassifiedQuery_AgentData,
	query_data: DirClassifiedQuery_QueryData,
}


pub struct DirClassifiedQueryBackend_AgentData {
	agent_id: LLUUID,
}

pub struct DirClassifiedQueryBackend_QueryData {
	query_id: LLUUID,
	query_text: Vec<u8>,
	query_flags: u32,
	category: u32,
	estate_id: u32,
	godlike: bool,
	query_start: i32,
}

pub struct DirClassifiedQueryBackend {
	agent_data: DirClassifiedQueryBackend_AgentData,
	query_data: DirClassifiedQueryBackend_QueryData,
}


pub struct DirClassifiedReply_AgentData {
	agent_id: LLUUID,
}

pub struct DirClassifiedReply_QueryData {
	query_id: LLUUID,
}

pub struct DirClassifiedReply_QueryReplies {
	classified_id: LLUUID,
	name: Vec<u8>,
	classified_flags: u8,
	creation_date: u32,
	expiration_date: u32,
	price_for_listing: i32,
}

pub struct DirClassifiedReply_StatusData {
	status: u32,
}

pub struct DirClassifiedReply {
	agent_data: DirClassifiedReply_AgentData,
	query_data: DirClassifiedReply_QueryData,
	query_replies: Vec<DirClassifiedReply_QueryReplies>,
	status_data: Vec<DirClassifiedReply_StatusData>,
}


pub struct AvatarClassifiedReply_AgentData {
	agent_id: LLUUID,
	target_id: LLUUID,
}

pub struct AvatarClassifiedReply_Data {
	classified_id: LLUUID,
	name: Vec<u8>,
}

pub struct AvatarClassifiedReply {
	agent_data: AvatarClassifiedReply_AgentData,
	data: Vec<AvatarClassifiedReply_Data>,
}


pub struct ClassifiedInfoRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ClassifiedInfoRequest_Data {
	classified_id: LLUUID,
}

pub struct ClassifiedInfoRequest {
	agent_data: ClassifiedInfoRequest_AgentData,
	data: ClassifiedInfoRequest_Data,
}


pub struct ClassifiedInfoReply_AgentData {
	agent_id: LLUUID,
}

pub struct ClassifiedInfoReply_Data {
	classified_id: LLUUID,
	creator_id: LLUUID,
	creation_date: u32,
	expiration_date: u32,
	category: u32,
	name: Vec<u8>,
	desc: Vec<u8>,
	parcel_id: LLUUID,
	parent_estate: u32,
	snapshot_id: LLUUID,
	sim_name: Vec<u8>,
	pos_global: Vector3<f64>,
	parcel_name: Vec<u8>,
	classified_flags: u8,
	price_for_listing: i32,
}

pub struct ClassifiedInfoReply {
	agent_data: ClassifiedInfoReply_AgentData,
	data: ClassifiedInfoReply_Data,
}


pub struct ClassifiedInfoUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ClassifiedInfoUpdate_Data {
	classified_id: LLUUID,
	category: u32,
	name: Vec<u8>,
	desc: Vec<u8>,
	parcel_id: LLUUID,
	parent_estate: u32,
	snapshot_id: LLUUID,
	pos_global: Vector3<f64>,
	classified_flags: u8,
	price_for_listing: i32,
}

pub struct ClassifiedInfoUpdate {
	agent_data: ClassifiedInfoUpdate_AgentData,
	data: ClassifiedInfoUpdate_Data,
}


pub struct ClassifiedDelete_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ClassifiedDelete_Data {
	classified_id: LLUUID,
}

pub struct ClassifiedDelete {
	agent_data: ClassifiedDelete_AgentData,
	data: ClassifiedDelete_Data,
}


pub struct ClassifiedGodDelete_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ClassifiedGodDelete_Data {
	classified_id: LLUUID,
	query_id: LLUUID,
}

pub struct ClassifiedGodDelete {
	agent_data: ClassifiedGodDelete_AgentData,
	data: ClassifiedGodDelete_Data,
}


pub struct DirLandQuery_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct DirLandQuery_QueryData {
	query_id: LLUUID,
	query_flags: u32,
	search_type: u32,
	price: i32,
	area: i32,
	query_start: i32,
}

pub struct DirLandQuery {
	agent_data: DirLandQuery_AgentData,
	query_data: DirLandQuery_QueryData,
}


pub struct DirLandQueryBackend_AgentData {
	agent_id: LLUUID,
}

pub struct DirLandQueryBackend_QueryData {
	query_id: LLUUID,
	query_flags: u32,
	search_type: u32,
	price: i32,
	area: i32,
	query_start: i32,
	estate_id: u32,
	godlike: bool,
}

pub struct DirLandQueryBackend {
	agent_data: DirLandQueryBackend_AgentData,
	query_data: DirLandQueryBackend_QueryData,
}


pub struct DirLandReply_AgentData {
	agent_id: LLUUID,
}

pub struct DirLandReply_QueryData {
	query_id: LLUUID,
}

pub struct DirLandReply_QueryReplies {
	parcel_id: LLUUID,
	name: Vec<u8>,
	auction: bool,
	for_sale: bool,
	sale_price: i32,
	actual_area: i32,
}

pub struct DirLandReply {
	agent_data: DirLandReply_AgentData,
	query_data: DirLandReply_QueryData,
	query_replies: Vec<DirLandReply_QueryReplies>,
}


pub struct DirPopularQuery_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct DirPopularQuery_QueryData {
	query_id: LLUUID,
	query_flags: u32,
}

pub struct DirPopularQuery {
	agent_data: DirPopularQuery_AgentData,
	query_data: DirPopularQuery_QueryData,
}


pub struct DirPopularQueryBackend_AgentData {
	agent_id: LLUUID,
}

pub struct DirPopularQueryBackend_QueryData {
	query_id: LLUUID,
	query_flags: u32,
	estate_id: u32,
	godlike: bool,
}

pub struct DirPopularQueryBackend {
	agent_data: DirPopularQueryBackend_AgentData,
	query_data: DirPopularQueryBackend_QueryData,
}


pub struct DirPopularReply_AgentData {
	agent_id: LLUUID,
}

pub struct DirPopularReply_QueryData {
	query_id: LLUUID,
}

pub struct DirPopularReply_QueryReplies {
	parcel_id: LLUUID,
	name: Vec<u8>,
	dwell: f32,
}

pub struct DirPopularReply {
	agent_data: DirPopularReply_AgentData,
	query_data: DirPopularReply_QueryData,
	query_replies: Vec<DirPopularReply_QueryReplies>,
}


pub struct ParcelInfoRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelInfoRequest_Data {
	parcel_id: LLUUID,
}

pub struct ParcelInfoRequest {
	agent_data: ParcelInfoRequest_AgentData,
	data: ParcelInfoRequest_Data,
}


pub struct ParcelInfoReply_AgentData {
	agent_id: LLUUID,
}

pub struct ParcelInfoReply_Data {
	parcel_id: LLUUID,
	owner_id: LLUUID,
	name: Vec<u8>,
	desc: Vec<u8>,
	actual_area: i32,
	billable_area: i32,
	flags: u8,
	global_x: f32,
	global_y: f32,
	global_z: f32,
	sim_name: Vec<u8>,
	snapshot_id: LLUUID,
	dwell: f32,
	sale_price: i32,
	auction_id: i32,
}

pub struct ParcelInfoReply {
	agent_data: ParcelInfoReply_AgentData,
	data: ParcelInfoReply_Data,
}


pub struct ParcelObjectOwnersRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelObjectOwnersRequest_ParcelData {
	local_id: i32,
}

pub struct ParcelObjectOwnersRequest {
	agent_data: ParcelObjectOwnersRequest_AgentData,
	parcel_data: ParcelObjectOwnersRequest_ParcelData,
}


pub struct ParcelObjectOwnersReply_Data {
	owner_id: LLUUID,
	is_group_owned: bool,
	count: i32,
	online_status: bool,
}

pub struct ParcelObjectOwnersReply {
	data: Vec<ParcelObjectOwnersReply_Data>,
}


pub struct GroupNoticesListRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct GroupNoticesListRequest_Data {
	group_id: LLUUID,
}

pub struct GroupNoticesListRequest {
	agent_data: GroupNoticesListRequest_AgentData,
	data: GroupNoticesListRequest_Data,
}


pub struct GroupNoticesListReply_AgentData {
	agent_id: LLUUID,
	group_id: LLUUID,
}

pub struct GroupNoticesListReply_Data {
	notice_id: LLUUID,
	timestamp: u32,
	from_name: Vec<u8>,
	subject: Vec<u8>,
	has_attachment: bool,
	asset_type: u8,
}

pub struct GroupNoticesListReply {
	agent_data: GroupNoticesListReply_AgentData,
	data: Vec<GroupNoticesListReply_Data>,
}


pub struct GroupNoticeRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct GroupNoticeRequest_Data {
	group_notice_id: LLUUID,
}

pub struct GroupNoticeRequest {
	agent_data: GroupNoticeRequest_AgentData,
	data: GroupNoticeRequest_Data,
}


pub struct GroupNoticeAdd_AgentData {
	agent_id: LLUUID,
}

pub struct GroupNoticeAdd_MessageBlock {
	to_group_id: LLUUID,
	id: LLUUID,
	dialog: u8,
	from_agent_name: Vec<u8>,
	message: Vec<u8>,
	binary_bucket: Vec<u8>,
}

pub struct GroupNoticeAdd {
	agent_data: GroupNoticeAdd_AgentData,
	message_block: GroupNoticeAdd_MessageBlock,
}


pub struct TeleportRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct TeleportRequest_Info {
	region_id: LLUUID,
	position: Vector3<f32>,
	look_at: Vector3<f32>,
}

pub struct TeleportRequest {
	agent_data: TeleportRequest_AgentData,
	info: TeleportRequest_Info,
}


pub struct TeleportLocationRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct TeleportLocationRequest_Info {
	region_handle: u64,
	position: Vector3<f32>,
	look_at: Vector3<f32>,
}

pub struct TeleportLocationRequest {
	agent_data: TeleportLocationRequest_AgentData,
	info: TeleportLocationRequest_Info,
}


pub struct TeleportLocal_Info {
	agent_id: LLUUID,
	location_id: u32,
	position: Vector3<f32>,
	look_at: Vector3<f32>,
	teleport_flags: u32,
}

pub struct TeleportLocal {
	info: TeleportLocal_Info,
}


pub struct TeleportLandmarkRequest_Info {
	agent_id: LLUUID,
	session_id: LLUUID,
	landmark_id: LLUUID,
}

pub struct TeleportLandmarkRequest {
	info: TeleportLandmarkRequest_Info,
}


pub struct TeleportProgress_AgentData {
	agent_id: LLUUID,
}

pub struct TeleportProgress_Info {
	teleport_flags: u32,
	message: Vec<u8>,
}

pub struct TeleportProgress {
	agent_data: TeleportProgress_AgentData,
	info: TeleportProgress_Info,
}


pub struct DataHomeLocationRequest_Info {
	agent_id: LLUUID,
	kicked_from_estate_id: u32,
}

pub struct DataHomeLocationRequest_AgentInfo {
	agent_effective_maturity: u32,
}

pub struct DataHomeLocationRequest {
	info: DataHomeLocationRequest_Info,
	agent_info: DataHomeLocationRequest_AgentInfo,
}


pub struct DataHomeLocationReply_Info {
	agent_id: LLUUID,
	region_handle: u64,
	position: Vector3<f32>,
	look_at: Vector3<f32>,
}

pub struct DataHomeLocationReply {
	info: DataHomeLocationReply_Info,
}


pub struct TeleportFinish_Info {
	agent_id: LLUUID,
	location_id: u32,
	sim_ip: IpAddr,
	sim_port: IpPort,
	region_handle: u64,
	seed_capability: Vec<u8>,
	sim_access: u8,
	teleport_flags: u32,
}

pub struct TeleportFinish {
	info: TeleportFinish_Info,
}


pub struct StartLure_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct StartLure_Info {
	lure_type: u8,
	message: Vec<u8>,
}

pub struct StartLure_TargetData {
	target_id: LLUUID,
}

pub struct StartLure {
	agent_data: StartLure_AgentData,
	info: StartLure_Info,
	target_data: Vec<StartLure_TargetData>,
}


pub struct TeleportLureRequest_Info {
	agent_id: LLUUID,
	session_id: LLUUID,
	lure_id: LLUUID,
	teleport_flags: u32,
}

pub struct TeleportLureRequest {
	info: TeleportLureRequest_Info,
}


pub struct TeleportCancel_Info {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct TeleportCancel {
	info: TeleportCancel_Info,
}


pub struct TeleportStart_Info {
	teleport_flags: u32,
}

pub struct TeleportStart {
	info: TeleportStart_Info,
}


pub struct TeleportFailed_Info {
	agent_id: LLUUID,
	reason: Vec<u8>,
}

pub struct TeleportFailed_AlertInfo {
	message: Vec<u8>,
	extra_params: Vec<u8>,
}

pub struct TeleportFailed {
	info: TeleportFailed_Info,
	alert_info: Vec<TeleportFailed_AlertInfo>,
}


pub struct Undo_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct Undo_ObjectData {
	object_id: LLUUID,
}

pub struct Undo {
	agent_data: Undo_AgentData,
	object_data: Vec<Undo_ObjectData>,
}


pub struct Redo_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct Redo_ObjectData {
	object_id: LLUUID,
}

pub struct Redo {
	agent_data: Redo_AgentData,
	object_data: Vec<Redo_ObjectData>,
}


pub struct UndoLand_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct UndoLand {
	agent_data: UndoLand_AgentData,
}


pub struct AgentPause_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	serial_num: u32,
}

pub struct AgentPause {
	agent_data: AgentPause_AgentData,
}


pub struct AgentResume_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	serial_num: u32,
}

pub struct AgentResume {
	agent_data: AgentResume_AgentData,
}


pub struct AgentUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	body_rotation: Quaternion<f32>,
	head_rotation: Quaternion<f32>,
	state: u8,
	camera_center: Vector3<f32>,
	camera_at_axis: Vector3<f32>,
	camera_left_axis: Vector3<f32>,
	camera_up_axis: Vector3<f32>,
	far: f32,
	control_flags: u32,
	flags: u8,
}

pub struct AgentUpdate {
	agent_data: AgentUpdate_AgentData,
}


pub struct ChatFromViewer_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ChatFromViewer_ChatData {
	message: Vec<u8>,
	type_: u8,
	channel: i32,
}

pub struct ChatFromViewer {
	agent_data: ChatFromViewer_AgentData,
	chat_data: ChatFromViewer_ChatData,
}


pub struct AgentThrottle_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	circuit_code: u32,
}

pub struct AgentThrottle_Throttle {
	gen_counter: u32,
	throttles: Vec<u8>,
}

pub struct AgentThrottle {
	agent_data: AgentThrottle_AgentData,
	throttle: AgentThrottle_Throttle,
}


pub struct AgentFOV_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	circuit_code: u32,
}

pub struct AgentFOV_FOVBlock {
	gen_counter: u32,
	vertical_angle: f32,
}

pub struct AgentFOV {
	agent_data: AgentFOV_AgentData,
	fov_block: AgentFOV_FOVBlock,
}


pub struct AgentHeightWidth_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	circuit_code: u32,
}

pub struct AgentHeightWidth_HeightWidthBlock {
	gen_counter: u32,
	height: u16,
	width: u16,
}

pub struct AgentHeightWidth {
	agent_data: AgentHeightWidth_AgentData,
	height_width_block: AgentHeightWidth_HeightWidthBlock,
}


pub struct AgentSetAppearance_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	serial_num: u32,
	size: Vector3<f32>,
}

pub struct AgentSetAppearance_WearableData {
	cache_id: LLUUID,
	texture_index: u8,
}

pub struct AgentSetAppearance_ObjectData {
	texture_entry: Vec<u8>,
}

pub struct AgentSetAppearance_VisualParam {
	param_value: u8,
}

pub struct AgentSetAppearance {
	agent_data: AgentSetAppearance_AgentData,
	wearable_data: Vec<AgentSetAppearance_WearableData>,
	object_data: AgentSetAppearance_ObjectData,
	visual_param: Vec<AgentSetAppearance_VisualParam>,
}


pub struct AgentAnimation_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct AgentAnimation_AnimationList {
	anim_id: LLUUID,
	start_anim: bool,
}

pub struct AgentAnimation_PhysicalAvatarEventList {
	type_data: Vec<u8>,
}

pub struct AgentAnimation {
	agent_data: AgentAnimation_AgentData,
	animation_list: Vec<AgentAnimation_AnimationList>,
	physical_avatar_event_list: Vec<AgentAnimation_PhysicalAvatarEventList>,
}


pub struct AgentRequestSit_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct AgentRequestSit_TargetObject {
	target_id: LLUUID,
	offset: Vector3<f32>,
}

pub struct AgentRequestSit {
	agent_data: AgentRequestSit_AgentData,
	target_object: AgentRequestSit_TargetObject,
}


pub struct AgentSit_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct AgentSit {
	agent_data: AgentSit_AgentData,
}


pub struct AgentQuitCopy_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct AgentQuitCopy_FuseBlock {
	viewer_circuit_code: u32,
}

pub struct AgentQuitCopy {
	agent_data: AgentQuitCopy_AgentData,
	fuse_block: AgentQuitCopy_FuseBlock,
}


pub struct RequestImage_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RequestImage_RequestImage {
	image: LLUUID,
	discard_level: i8,
	download_priority: f32,
	packet: u32,
	type_: u8,
}

pub struct RequestImage {
	agent_data: RequestImage_AgentData,
	request_image: Vec<RequestImage_RequestImage>,
}


pub struct ImageNotInDatabase_ImageID {
	id: LLUUID,
}

pub struct ImageNotInDatabase {
	image_id: ImageNotInDatabase_ImageID,
}


pub struct RebakeAvatarTextures_TextureData {
	texture_id: LLUUID,
}

pub struct RebakeAvatarTextures {
	texture_data: RebakeAvatarTextures_TextureData,
}


pub struct SetAlwaysRun_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	always_run: bool,
}

pub struct SetAlwaysRun {
	agent_data: SetAlwaysRun_AgentData,
}


pub struct ObjectAdd_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct ObjectAdd_ObjectData {
	p_code: u8,
	material: u8,
	add_flags: u32,
	path_curve: u8,
	profile_curve: u8,
	path_begin: u16,
	path_end: u16,
	path_scale_x: u8,
	path_scale_y: u8,
	path_shear_x: u8,
	path_shear_y: u8,
	path_twist: i8,
	path_twist_begin: i8,
	path_radius_offset: i8,
	path_taper_x: i8,
	path_taper_y: i8,
	path_revolutions: u8,
	path_skew: i8,
	profile_begin: u16,
	profile_end: u16,
	profile_hollow: u16,
	bypass_raycast: u8,
	ray_start: Vector3<f32>,
	ray_end: Vector3<f32>,
	ray_target_id: LLUUID,
	ray_end_is_intersection: u8,
	scale: Vector3<f32>,
	rotation: Quaternion<f32>,
	state: u8,
}

pub struct ObjectAdd {
	agent_data: ObjectAdd_AgentData,
	object_data: ObjectAdd_ObjectData,
}


pub struct ObjectDelete_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	force: bool,
}

pub struct ObjectDelete_ObjectData {
	object_local_id: u32,
}

pub struct ObjectDelete {
	agent_data: ObjectDelete_AgentData,
	object_data: Vec<ObjectDelete_ObjectData>,
}


pub struct ObjectDuplicate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct ObjectDuplicate_SharedData {
	offset: Vector3<f32>,
	duplicate_flags: u32,
}

pub struct ObjectDuplicate_ObjectData {
	object_local_id: u32,
}

pub struct ObjectDuplicate {
	agent_data: ObjectDuplicate_AgentData,
	shared_data: ObjectDuplicate_SharedData,
	object_data: Vec<ObjectDuplicate_ObjectData>,
}


pub struct ObjectDuplicateOnRay_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
	ray_start: Vector3<f32>,
	ray_end: Vector3<f32>,
	bypass_raycast: bool,
	ray_end_is_intersection: bool,
	copy_centers: bool,
	copy_rotates: bool,
	ray_target_id: LLUUID,
	duplicate_flags: u32,
}

pub struct ObjectDuplicateOnRay_ObjectData {
	object_local_id: u32,
}

pub struct ObjectDuplicateOnRay {
	agent_data: ObjectDuplicateOnRay_AgentData,
	object_data: Vec<ObjectDuplicateOnRay_ObjectData>,
}


pub struct MultipleObjectUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct MultipleObjectUpdate_ObjectData {
	object_local_id: u32,
	type_: u8,
	data: Vec<u8>,
}

pub struct MultipleObjectUpdate {
	agent_data: MultipleObjectUpdate_AgentData,
	object_data: Vec<MultipleObjectUpdate_ObjectData>,
}


pub struct RequestMultipleObjects_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RequestMultipleObjects_ObjectData {
	cache_miss_type: u8,
	id: u32,
}

pub struct RequestMultipleObjects {
	agent_data: RequestMultipleObjects_AgentData,
	object_data: Vec<RequestMultipleObjects_ObjectData>,
}


pub struct ObjectPosition_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectPosition_ObjectData {
	object_local_id: u32,
	position: Vector3<f32>,
}

pub struct ObjectPosition {
	agent_data: ObjectPosition_AgentData,
	object_data: Vec<ObjectPosition_ObjectData>,
}


pub struct ObjectScale_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectScale_ObjectData {
	object_local_id: u32,
	scale: Vector3<f32>,
}

pub struct ObjectScale {
	agent_data: ObjectScale_AgentData,
	object_data: Vec<ObjectScale_ObjectData>,
}


pub struct ObjectRotation_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectRotation_ObjectData {
	object_local_id: u32,
	rotation: Quaternion<f32>,
}

pub struct ObjectRotation {
	agent_data: ObjectRotation_AgentData,
	object_data: Vec<ObjectRotation_ObjectData>,
}


pub struct ObjectFlagUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	object_local_id: u32,
	use_physics: bool,
	is_temporary: bool,
	is_phantom: bool,
	casts_shadows: bool,
}

pub struct ObjectFlagUpdate {
	agent_data: ObjectFlagUpdate_AgentData,
}


pub struct ObjectClickAction_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectClickAction_ObjectData {
	object_local_id: u32,
	click_action: u8,
}

pub struct ObjectClickAction {
	agent_data: ObjectClickAction_AgentData,
	object_data: Vec<ObjectClickAction_ObjectData>,
}


pub struct ObjectImage_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectImage_ObjectData {
	object_local_id: u32,
	media_url: Vec<u8>,
	texture_entry: Vec<u8>,
}

pub struct ObjectImage {
	agent_data: ObjectImage_AgentData,
	object_data: Vec<ObjectImage_ObjectData>,
}


pub struct ObjectMaterial_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectMaterial_ObjectData {
	object_local_id: u32,
	material: u8,
}

pub struct ObjectMaterial {
	agent_data: ObjectMaterial_AgentData,
	object_data: Vec<ObjectMaterial_ObjectData>,
}


pub struct ObjectShape_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectShape_ObjectData {
	object_local_id: u32,
	path_curve: u8,
	profile_curve: u8,
	path_begin: u16,
	path_end: u16,
	path_scale_x: u8,
	path_scale_y: u8,
	path_shear_x: u8,
	path_shear_y: u8,
	path_twist: i8,
	path_twist_begin: i8,
	path_radius_offset: i8,
	path_taper_x: i8,
	path_taper_y: i8,
	path_revolutions: u8,
	path_skew: i8,
	profile_begin: u16,
	profile_end: u16,
	profile_hollow: u16,
}

pub struct ObjectShape {
	agent_data: ObjectShape_AgentData,
	object_data: Vec<ObjectShape_ObjectData>,
}


pub struct ObjectExtraParams_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectExtraParams_ObjectData {
	object_local_id: u32,
	param_type: u16,
	param_in_use: bool,
	param_size: u32,
	param_data: Vec<u8>,
}

pub struct ObjectExtraParams {
	agent_data: ObjectExtraParams_AgentData,
	object_data: Vec<ObjectExtraParams_ObjectData>,
}


pub struct ObjectOwner_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectOwner_HeaderData {
	override_: bool,
	owner_id: LLUUID,
	group_id: LLUUID,
}

pub struct ObjectOwner_ObjectData {
	object_local_id: u32,
}

pub struct ObjectOwner {
	agent_data: ObjectOwner_AgentData,
	header_data: ObjectOwner_HeaderData,
	object_data: Vec<ObjectOwner_ObjectData>,
}


pub struct ObjectGroup_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct ObjectGroup_ObjectData {
	object_local_id: u32,
}

pub struct ObjectGroup {
	agent_data: ObjectGroup_AgentData,
	object_data: Vec<ObjectGroup_ObjectData>,
}


pub struct ObjectBuy_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
	category_id: LLUUID,
}

pub struct ObjectBuy_ObjectData {
	object_local_id: u32,
	sale_type: u8,
	sale_price: i32,
}

pub struct ObjectBuy {
	agent_data: ObjectBuy_AgentData,
	object_data: Vec<ObjectBuy_ObjectData>,
}


pub struct BuyObjectInventory_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct BuyObjectInventory_Data {
	object_id: LLUUID,
	item_id: LLUUID,
	folder_id: LLUUID,
}

pub struct BuyObjectInventory {
	agent_data: BuyObjectInventory_AgentData,
	data: BuyObjectInventory_Data,
}


pub struct DerezContainer_Data {
	object_id: LLUUID,
	delete: bool,
}

pub struct DerezContainer {
	data: DerezContainer_Data,
}


pub struct ObjectPermissions_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectPermissions_HeaderData {
	override_: bool,
}

pub struct ObjectPermissions_ObjectData {
	object_local_id: u32,
	field: u8,
	set: u8,
	mask: u32,
}

pub struct ObjectPermissions {
	agent_data: ObjectPermissions_AgentData,
	header_data: ObjectPermissions_HeaderData,
	object_data: Vec<ObjectPermissions_ObjectData>,
}


pub struct ObjectSaleInfo_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectSaleInfo_ObjectData {
	local_id: u32,
	sale_type: u8,
	sale_price: i32,
}

pub struct ObjectSaleInfo {
	agent_data: ObjectSaleInfo_AgentData,
	object_data: Vec<ObjectSaleInfo_ObjectData>,
}


pub struct ObjectName_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectName_ObjectData {
	local_id: u32,
	name: Vec<u8>,
}

pub struct ObjectName {
	agent_data: ObjectName_AgentData,
	object_data: Vec<ObjectName_ObjectData>,
}


pub struct ObjectDescription_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectDescription_ObjectData {
	local_id: u32,
	description: Vec<u8>,
}

pub struct ObjectDescription {
	agent_data: ObjectDescription_AgentData,
	object_data: Vec<ObjectDescription_ObjectData>,
}


pub struct ObjectCategory_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectCategory_ObjectData {
	local_id: u32,
	category: u32,
}

pub struct ObjectCategory {
	agent_data: ObjectCategory_AgentData,
	object_data: Vec<ObjectCategory_ObjectData>,
}


pub struct ObjectSelect_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectSelect_ObjectData {
	object_local_id: u32,
}

pub struct ObjectSelect {
	agent_data: ObjectSelect_AgentData,
	object_data: Vec<ObjectSelect_ObjectData>,
}


pub struct ObjectDeselect_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectDeselect_ObjectData {
	object_local_id: u32,
}

pub struct ObjectDeselect {
	agent_data: ObjectDeselect_AgentData,
	object_data: Vec<ObjectDeselect_ObjectData>,
}


pub struct ObjectAttach_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	attachment_point: u8,
}

pub struct ObjectAttach_ObjectData {
	object_local_id: u32,
	rotation: Quaternion<f32>,
}

pub struct ObjectAttach {
	agent_data: ObjectAttach_AgentData,
	object_data: Vec<ObjectAttach_ObjectData>,
}


pub struct ObjectDetach_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectDetach_ObjectData {
	object_local_id: u32,
}

pub struct ObjectDetach {
	agent_data: ObjectDetach_AgentData,
	object_data: Vec<ObjectDetach_ObjectData>,
}


pub struct ObjectDrop_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectDrop_ObjectData {
	object_local_id: u32,
}

pub struct ObjectDrop {
	agent_data: ObjectDrop_AgentData,
	object_data: Vec<ObjectDrop_ObjectData>,
}


pub struct ObjectLink_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectLink_ObjectData {
	object_local_id: u32,
}

pub struct ObjectLink {
	agent_data: ObjectLink_AgentData,
	object_data: Vec<ObjectLink_ObjectData>,
}


pub struct ObjectDelink_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectDelink_ObjectData {
	object_local_id: u32,
}

pub struct ObjectDelink {
	agent_data: ObjectDelink_AgentData,
	object_data: Vec<ObjectDelink_ObjectData>,
}


pub struct ObjectGrab_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectGrab_ObjectData {
	local_id: u32,
	grab_offset: Vector3<f32>,
}

pub struct ObjectGrab_SurfaceInfo {
	uv_coord: Vector3<f32>,
	st_coord: Vector3<f32>,
	face_index: i32,
	position: Vector3<f32>,
	normal: Vector3<f32>,
	binormal: Vector3<f32>,
}

pub struct ObjectGrab {
	agent_data: ObjectGrab_AgentData,
	object_data: ObjectGrab_ObjectData,
	surface_info: Vec<ObjectGrab_SurfaceInfo>,
}


pub struct ObjectGrabUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectGrabUpdate_ObjectData {
	object_id: LLUUID,
	grab_offset_initial: Vector3<f32>,
	grab_position: Vector3<f32>,
	time_since_last: u32,
}

pub struct ObjectGrabUpdate_SurfaceInfo {
	uv_coord: Vector3<f32>,
	st_coord: Vector3<f32>,
	face_index: i32,
	position: Vector3<f32>,
	normal: Vector3<f32>,
	binormal: Vector3<f32>,
}

pub struct ObjectGrabUpdate {
	agent_data: ObjectGrabUpdate_AgentData,
	object_data: ObjectGrabUpdate_ObjectData,
	surface_info: Vec<ObjectGrabUpdate_SurfaceInfo>,
}


pub struct ObjectDeGrab_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectDeGrab_ObjectData {
	local_id: u32,
}

pub struct ObjectDeGrab_SurfaceInfo {
	uv_coord: Vector3<f32>,
	st_coord: Vector3<f32>,
	face_index: i32,
	position: Vector3<f32>,
	normal: Vector3<f32>,
	binormal: Vector3<f32>,
}

pub struct ObjectDeGrab {
	agent_data: ObjectDeGrab_AgentData,
	object_data: ObjectDeGrab_ObjectData,
	surface_info: Vec<ObjectDeGrab_SurfaceInfo>,
}


pub struct ObjectSpinStart_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectSpinStart_ObjectData {
	object_id: LLUUID,
}

pub struct ObjectSpinStart {
	agent_data: ObjectSpinStart_AgentData,
	object_data: ObjectSpinStart_ObjectData,
}


pub struct ObjectSpinUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectSpinUpdate_ObjectData {
	object_id: LLUUID,
	rotation: Quaternion<f32>,
}

pub struct ObjectSpinUpdate {
	agent_data: ObjectSpinUpdate_AgentData,
	object_data: ObjectSpinUpdate_ObjectData,
}


pub struct ObjectSpinStop_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectSpinStop_ObjectData {
	object_id: LLUUID,
}

pub struct ObjectSpinStop {
	agent_data: ObjectSpinStop_AgentData,
	object_data: ObjectSpinStop_ObjectData,
}


pub struct ObjectExportSelected_AgentData {
	agent_id: LLUUID,
	request_id: LLUUID,
	volume_detail: i16,
}

pub struct ObjectExportSelected_ObjectData {
	object_id: LLUUID,
}

pub struct ObjectExportSelected {
	agent_data: ObjectExportSelected_AgentData,
	object_data: Vec<ObjectExportSelected_ObjectData>,
}


pub struct ModifyLand_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ModifyLand_ModifyBlock {
	action: u8,
	brush_size: u8,
	seconds: f32,
	height: f32,
}

pub struct ModifyLand_ParcelData {
	local_id: i32,
	west: f32,
	south: f32,
	east: f32,
	north: f32,
}

pub struct ModifyLand_ModifyBlockExtended {
	brush_size: f32,
}

pub struct ModifyLand {
	agent_data: ModifyLand_AgentData,
	modify_block: ModifyLand_ModifyBlock,
	parcel_data: Vec<ModifyLand_ParcelData>,
	modify_block_extended: Vec<ModifyLand_ModifyBlockExtended>,
}


pub struct VelocityInterpolateOn_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct VelocityInterpolateOn {
	agent_data: VelocityInterpolateOn_AgentData,
}


pub struct VelocityInterpolateOff_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct VelocityInterpolateOff {
	agent_data: VelocityInterpolateOff_AgentData,
}


pub struct StateSave_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct StateSave_DataBlock {
	filename: Vec<u8>,
}

pub struct StateSave {
	agent_data: StateSave_AgentData,
	data_block: StateSave_DataBlock,
}


pub struct ReportAutosaveCrash_AutosaveData {
	pid: i32,
	status: i32,
}

pub struct ReportAutosaveCrash {
	autosave_data: ReportAutosaveCrash_AutosaveData,
}


pub struct SimWideDeletes_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct SimWideDeletes_DataBlock {
	target_id: LLUUID,
	flags: u32,
}

pub struct SimWideDeletes {
	agent_data: SimWideDeletes_AgentData,
	data_block: SimWideDeletes_DataBlock,
}


pub struct RequestObjectPropertiesFamily_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RequestObjectPropertiesFamily_ObjectData {
	request_flags: u32,
	object_id: LLUUID,
}

pub struct RequestObjectPropertiesFamily {
	agent_data: RequestObjectPropertiesFamily_AgentData,
	object_data: RequestObjectPropertiesFamily_ObjectData,
}


pub struct TrackAgent_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct TrackAgent_TargetData {
	prey_id: LLUUID,
}

pub struct TrackAgent {
	agent_data: TrackAgent_AgentData,
	target_data: TrackAgent_TargetData,
}


pub struct ViewerStats_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	ip: IpAddr,
	start_time: u32,
	run_time: f32,
	sim_fps: f32,
	fps: f32,
	agents_in_view: u8,
	ping: f32,
	meters_traveled: f64,
	regions_visited: i32,
	sys_ram: u32,
	sys_os: Vec<u8>,
	sys_cpu: Vec<u8>,
	sys_gpu: Vec<u8>,
}

pub struct ViewerStats_DownloadTotals {
	world: u32,
	objects: u32,
	textures: u32,
}

pub struct ViewerStats_NetStats {
	bytes: u32,
	packets: u32,
	compressed: u32,
	savings: u32,
}

pub struct ViewerStats_FailStats {
	send_packet: u32,
	dropped: u32,
	resent: u32,
	failed_resends: u32,
	off_circuit: u32,
	invalid: u32,
}

pub struct ViewerStats_MiscStats {
	type_: u32,
	value: f64,
}

pub struct ViewerStats {
	agent_data: ViewerStats_AgentData,
	download_totals: ViewerStats_DownloadTotals,
	net_stats: [ViewerStats_NetStats; 2],
	fail_stats: ViewerStats_FailStats,
	misc_stats: Vec<ViewerStats_MiscStats>,
}


pub struct ScriptAnswerYes_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ScriptAnswerYes_Data {
	task_id: LLUUID,
	item_id: LLUUID,
	questions: i32,
}

pub struct ScriptAnswerYes {
	agent_data: ScriptAnswerYes_AgentData,
	data: ScriptAnswerYes_Data,
}


pub struct UserReport_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct UserReport_ReportData {
	report_type: u8,
	category: u8,
	position: Vector3<f32>,
	check_flags: u8,
	screenshot_id: LLUUID,
	object_id: LLUUID,
	abuser_id: LLUUID,
	abuse_region_name: Vec<u8>,
	abuse_region_id: LLUUID,
	summary: Vec<u8>,
	details: Vec<u8>,
	version_string: Vec<u8>,
}

pub struct UserReport {
	agent_data: UserReport_AgentData,
	report_data: UserReport_ReportData,
}


pub struct AlertMessage_AlertData {
	message: Vec<u8>,
}

pub struct AlertMessage_AlertInfo {
	message: Vec<u8>,
	extra_params: Vec<u8>,
}

pub struct AlertMessage {
	alert_data: AlertMessage_AlertData,
	alert_info: Vec<AlertMessage_AlertInfo>,
}


pub struct AgentAlertMessage_AgentData {
	agent_id: LLUUID,
}

pub struct AgentAlertMessage_AlertData {
	modal: bool,
	message: Vec<u8>,
}

pub struct AgentAlertMessage {
	agent_data: AgentAlertMessage_AgentData,
	alert_data: AgentAlertMessage_AlertData,
}


pub struct MeanCollisionAlert_MeanCollision {
	victim: LLUUID,
	perp: LLUUID,
	time: u32,
	mag: f32,
	type_: u8,
}

pub struct MeanCollisionAlert {
	mean_collision: Vec<MeanCollisionAlert_MeanCollision>,
}


pub struct ViewerFrozenMessage_FrozenData {
	data: bool,
}

pub struct ViewerFrozenMessage {
	frozen_data: ViewerFrozenMessage_FrozenData,
}


pub struct HealthMessage_HealthData {
	health: f32,
}

pub struct HealthMessage {
	health_data: HealthMessage_HealthData,
}


pub struct ChatFromSimulator_ChatData {
	from_name: Vec<u8>,
	source_id: LLUUID,
	owner_id: LLUUID,
	source_type: u8,
	chat_type: u8,
	audible: u8,
	position: Vector3<f32>,
	message: Vec<u8>,
}

pub struct ChatFromSimulator {
	chat_data: ChatFromSimulator_ChatData,
}


pub struct SimStats_Region {
	region_x: u32,
	region_y: u32,
	region_flags: u32,
	object_capacity: u32,
}

pub struct SimStats_Stat {
	stat_id: u32,
	stat_value: f32,
}

pub struct SimStats_PidStat {
	pid: i32,
}

pub struct SimStats {
	region: SimStats_Region,
	stat: Vec<SimStats_Stat>,
	pid_stat: SimStats_PidStat,
}


pub struct RequestRegionInfo_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RequestRegionInfo {
	agent_data: RequestRegionInfo_AgentData,
}


pub struct RegionInfo_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RegionInfo_RegionInfo {
	sim_name: Vec<u8>,
	estate_id: u32,
	parent_estate_id: u32,
	region_flags: u32,
	sim_access: u8,
	max_agents: u8,
	billable_factor: f32,
	object_bonus_factor: f32,
	water_height: f32,
	terrain_raise_limit: f32,
	terrain_lower_limit: f32,
	price_per_meter: i32,
	redirect_grid_x: i32,
	redirect_grid_y: i32,
	use_estate_sun: bool,
	sun_hour: f32,
}

pub struct RegionInfo_RegionInfo2 {
	product_sku: Vec<u8>,
	product_name: Vec<u8>,
	max_agents32: u32,
	hard_max_agents: u32,
	hard_max_objects: u32,
}

pub struct RegionInfo {
	agent_data: RegionInfo_AgentData,
	region_info: RegionInfo_RegionInfo,
	region_info2: RegionInfo_RegionInfo2,
}


pub struct GodUpdateRegionInfo_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct GodUpdateRegionInfo_RegionInfo {
	sim_name: Vec<u8>,
	estate_id: u32,
	parent_estate_id: u32,
	region_flags: u32,
	billable_factor: f32,
	price_per_meter: i32,
	redirect_grid_x: i32,
	redirect_grid_y: i32,
}

pub struct GodUpdateRegionInfo {
	agent_data: GodUpdateRegionInfo_AgentData,
	region_info: GodUpdateRegionInfo_RegionInfo,
}


pub struct NearestLandingRegionRequest_RequestingRegionData {
	region_handle: u64,
}

pub struct NearestLandingRegionRequest {
	requesting_region_data: NearestLandingRegionRequest_RequestingRegionData,
}


pub struct NearestLandingRegionReply_LandingRegionData {
	region_handle: u64,
}

pub struct NearestLandingRegionReply {
	landing_region_data: NearestLandingRegionReply_LandingRegionData,
}


pub struct NearestLandingRegionUpdated_RegionData {
	region_handle: u64,
}

pub struct NearestLandingRegionUpdated {
	region_data: NearestLandingRegionUpdated_RegionData,
}


pub struct TeleportLandingStatusChanged_RegionData {
	region_handle: u64,
}

pub struct TeleportLandingStatusChanged {
	region_data: TeleportLandingStatusChanged_RegionData,
}


pub struct RegionHandshake_RegionInfo {
	region_flags: u32,
	sim_access: u8,
	sim_name: Vec<u8>,
	sim_owner: LLUUID,
	is_estate_manager: bool,
	water_height: f32,
	billable_factor: f32,
	cache_id: LLUUID,
	terrain_base0: LLUUID,
	terrain_base1: LLUUID,
	terrain_base2: LLUUID,
	terrain_base3: LLUUID,
	terrain_detail0: LLUUID,
	terrain_detail1: LLUUID,
	terrain_detail2: LLUUID,
	terrain_detail3: LLUUID,
	terrain_start_height00: f32,
	terrain_start_height01: f32,
	terrain_start_height10: f32,
	terrain_start_height11: f32,
	terrain_height_range00: f32,
	terrain_height_range01: f32,
	terrain_height_range10: f32,
	terrain_height_range11: f32,
}

pub struct RegionHandshake_RegionInfo2 {
	region_id: LLUUID,
}

pub struct RegionHandshake_RegionInfo3 {
	cpu_class_id: i32,
	cpu_ratio: i32,
	colo_name: Vec<u8>,
	product_sku: Vec<u8>,
	product_name: Vec<u8>,
}

pub struct RegionHandshake {
	region_info: RegionHandshake_RegionInfo,
	region_info2: RegionHandshake_RegionInfo2,
	region_info3: RegionHandshake_RegionInfo3,
}


pub struct RegionHandshakeReply_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RegionHandshakeReply_RegionInfo {
	flags: u32,
}

pub struct RegionHandshakeReply {
	agent_data: RegionHandshakeReply_AgentData,
	region_info: RegionHandshakeReply_RegionInfo,
}


pub struct CoarseLocationUpdate_Location {
	x: u8,
	y: u8,
	z: u8,
}

pub struct CoarseLocationUpdate_Index {
	you: i16,
	prey: i16,
}

pub struct CoarseLocationUpdate_AgentData {
	agent_id: LLUUID,
}

pub struct CoarseLocationUpdate {
	location: Vec<CoarseLocationUpdate_Location>,
	index: CoarseLocationUpdate_Index,
	agent_data: Vec<CoarseLocationUpdate_AgentData>,
}


pub struct ImageData_ImageID {
	id: LLUUID,
	codec: u8,
	size: u32,
	packets: u16,
}

pub struct ImageData_ImageData {
	data: Vec<u8>,
}

pub struct ImageData {
	image_id: ImageData_ImageID,
	image_data: ImageData_ImageData,
}


pub struct ImagePacket_ImageID {
	id: LLUUID,
	packet: u16,
}

pub struct ImagePacket_ImageData {
	data: Vec<u8>,
}

pub struct ImagePacket {
	image_id: ImagePacket_ImageID,
	image_data: ImagePacket_ImageData,
}


pub struct LayerData_LayerID {
	type_: u8,
}

pub struct LayerData_LayerData {
	data: Vec<u8>,
}

pub struct LayerData {
	layer_id: LayerData_LayerID,
	layer_data: LayerData_LayerData,
}


pub struct ObjectUpdate_RegionData {
	region_handle: u64,
	time_dilation: u16,
}

pub struct ObjectUpdate_ObjectData {
	id: u32,
	state: u8,
	full_id: LLUUID,
	crc: u32,
	p_code: u8,
	material: u8,
	click_action: u8,
	scale: Vector3<f32>,
	object_data: Vec<u8>,
	parent_id: u32,
	update_flags: u32,
	path_curve: u8,
	profile_curve: u8,
	path_begin: u16,
	path_end: u16,
	path_scale_x: u8,
	path_scale_y: u8,
	path_shear_x: u8,
	path_shear_y: u8,
	path_twist: i8,
	path_twist_begin: i8,
	path_radius_offset: i8,
	path_taper_x: i8,
	path_taper_y: i8,
	path_revolutions: u8,
	path_skew: i8,
	profile_begin: u16,
	profile_end: u16,
	profile_hollow: u16,
	texture_entry: Vec<u8>,
	texture_anim: Vec<u8>,
	name_value: Vec<u8>,
	data: Vec<u8>,
	text: Vec<u8>,
	text_color: [u8; 4],
	media_url: Vec<u8>,
	ps_block: Vec<u8>,
	extra_params: Vec<u8>,
	sound: LLUUID,
	owner_id: LLUUID,
	gain: f32,
	flags: u8,
	radius: f32,
	joint_type: u8,
	joint_pivot: Vector3<f32>,
	joint_axis_or_anchor: Vector3<f32>,
}

pub struct ObjectUpdate {
	region_data: ObjectUpdate_RegionData,
	object_data: Vec<ObjectUpdate_ObjectData>,
}


pub struct ObjectUpdateCompressed_RegionData {
	region_handle: u64,
	time_dilation: u16,
}

pub struct ObjectUpdateCompressed_ObjectData {
	update_flags: u32,
	data: Vec<u8>,
}

pub struct ObjectUpdateCompressed {
	region_data: ObjectUpdateCompressed_RegionData,
	object_data: Vec<ObjectUpdateCompressed_ObjectData>,
}


pub struct ObjectUpdateCached_RegionData {
	region_handle: u64,
	time_dilation: u16,
}

pub struct ObjectUpdateCached_ObjectData {
	id: u32,
	crc: u32,
	update_flags: u32,
}

pub struct ObjectUpdateCached {
	region_data: ObjectUpdateCached_RegionData,
	object_data: Vec<ObjectUpdateCached_ObjectData>,
}


pub struct ImprovedTerseObjectUpdate_RegionData {
	region_handle: u64,
	time_dilation: u16,
}

pub struct ImprovedTerseObjectUpdate_ObjectData {
	data: Vec<u8>,
	texture_entry: Vec<u8>,
}

pub struct ImprovedTerseObjectUpdate {
	region_data: ImprovedTerseObjectUpdate_RegionData,
	object_data: Vec<ImprovedTerseObjectUpdate_ObjectData>,
}


pub struct KillObject_ObjectData {
	id: u32,
}

pub struct KillObject {
	object_data: Vec<KillObject_ObjectData>,
}


pub struct CrossedRegion_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct CrossedRegion_RegionData {
	sim_ip: IpAddr,
	sim_port: IpPort,
	region_handle: u64,
	seed_capability: Vec<u8>,
}

pub struct CrossedRegion_Info {
	position: Vector3<f32>,
	look_at: Vector3<f32>,
}

pub struct CrossedRegion {
	agent_data: CrossedRegion_AgentData,
	region_data: CrossedRegion_RegionData,
	info: CrossedRegion_Info,
}


pub struct SimulatorViewerTimeMessage_TimeInfo {
	usec_since_start: u64,
	sec_per_day: u32,
	sec_per_year: u32,
	sun_direction: Vector3<f32>,
	sun_phase: f32,
	sun_ang_velocity: Vector3<f32>,
}

pub struct SimulatorViewerTimeMessage {
	time_info: SimulatorViewerTimeMessage_TimeInfo,
}


pub struct EnableSimulator_SimulatorInfo {
	handle: u64,
	ip: IpAddr,
	port: IpPort,
}

pub struct EnableSimulator {
	simulator_info: EnableSimulator_SimulatorInfo,
}


pub struct DisableSimulator {
}


pub struct ConfirmEnableSimulator_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ConfirmEnableSimulator {
	agent_data: ConfirmEnableSimulator_AgentData,
}


pub struct TransferRequest_TransferInfo {
	transfer_id: LLUUID,
	channel_type: i32,
	source_type: i32,
	priority: f32,
	params: Vec<u8>,
}

pub struct TransferRequest {
	transfer_info: TransferRequest_TransferInfo,
}


pub struct TransferInfo_TransferInfo {
	transfer_id: LLUUID,
	channel_type: i32,
	target_type: i32,
	status: i32,
	size: i32,
	params: Vec<u8>,
}

pub struct TransferInfo {
	transfer_info: TransferInfo_TransferInfo,
}


pub struct TransferPacket_TransferData {
	transfer_id: LLUUID,
	channel_type: i32,
	packet: i32,
	status: i32,
	data: Vec<u8>,
}

pub struct TransferPacket {
	transfer_data: TransferPacket_TransferData,
}


pub struct TransferAbort_TransferInfo {
	transfer_id: LLUUID,
	channel_type: i32,
}

pub struct TransferAbort {
	transfer_info: TransferAbort_TransferInfo,
}


pub struct RequestXfer_XferID {
	id: u64,
	filename: Vec<u8>,
	file_path: u8,
	delete_on_completion: bool,
	use_big_packets: bool,
	v_file_id: LLUUID,
	v_file_type: i16,
}

pub struct RequestXfer {
	xfer_id: RequestXfer_XferID,
}


pub struct SendXferPacket_XferID {
	id: u64,
	packet: u32,
}

pub struct SendXferPacket_DataPacket {
	data: Vec<u8>,
}

pub struct SendXferPacket {
	xfer_id: SendXferPacket_XferID,
	data_packet: SendXferPacket_DataPacket,
}


pub struct ConfirmXferPacket_XferID {
	id: u64,
	packet: u32,
}

pub struct ConfirmXferPacket {
	xfer_id: ConfirmXferPacket_XferID,
}


pub struct AbortXfer_XferID {
	id: u64,
	result: i32,
}

pub struct AbortXfer {
	xfer_id: AbortXfer_XferID,
}


pub struct AvatarAnimation_Sender {
	id: LLUUID,
}

pub struct AvatarAnimation_AnimationList {
	anim_id: LLUUID,
	anim_sequence_id: i32,
}

pub struct AvatarAnimation_AnimationSourceList {
	object_id: LLUUID,
}

pub struct AvatarAnimation_PhysicalAvatarEventList {
	type_data: Vec<u8>,
}

pub struct AvatarAnimation {
	sender: AvatarAnimation_Sender,
	animation_list: Vec<AvatarAnimation_AnimationList>,
	animation_source_list: Vec<AvatarAnimation_AnimationSourceList>,
	physical_avatar_event_list: Vec<AvatarAnimation_PhysicalAvatarEventList>,
}


pub struct AvatarAppearance_Sender {
	id: LLUUID,
	is_trial: bool,
}

pub struct AvatarAppearance_ObjectData {
	texture_entry: Vec<u8>,
}

pub struct AvatarAppearance_VisualParam {
	param_value: u8,
}

pub struct AvatarAppearance {
	sender: AvatarAppearance_Sender,
	object_data: AvatarAppearance_ObjectData,
	visual_param: Vec<AvatarAppearance_VisualParam>,
}


pub struct AvatarSitResponse_SitObject {
	id: LLUUID,
}

pub struct AvatarSitResponse_SitTransform {
	auto_pilot: bool,
	sit_position: Vector3<f32>,
	sit_rotation: Quaternion<f32>,
	camera_eye_offset: Vector3<f32>,
	camera_at_offset: Vector3<f32>,
	force_mouselook: bool,
}

pub struct AvatarSitResponse {
	sit_object: AvatarSitResponse_SitObject,
	sit_transform: AvatarSitResponse_SitTransform,
}


pub struct SetFollowCamProperties_ObjectData {
	object_id: LLUUID,
}

pub struct SetFollowCamProperties_CameraProperty {
	type_: i32,
	value: f32,
}

pub struct SetFollowCamProperties {
	object_data: SetFollowCamProperties_ObjectData,
	camera_property: Vec<SetFollowCamProperties_CameraProperty>,
}


pub struct ClearFollowCamProperties_ObjectData {
	object_id: LLUUID,
}

pub struct ClearFollowCamProperties {
	object_data: ClearFollowCamProperties_ObjectData,
}


pub struct CameraConstraint_CameraCollidePlane {
	plane: Vector4<f32>,
}

pub struct CameraConstraint {
	camera_collide_plane: CameraConstraint_CameraCollidePlane,
}


pub struct ObjectProperties_ObjectData {
	object_id: LLUUID,
	creator_id: LLUUID,
	owner_id: LLUUID,
	group_id: LLUUID,
	creation_date: u64,
	base_mask: u32,
	owner_mask: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	ownership_cost: i32,
	sale_type: u8,
	sale_price: i32,
	aggregate_perms: u8,
	aggregate_perm_textures: u8,
	aggregate_perm_textures_owner: u8,
	category: u32,
	inventory_serial: i16,
	item_id: LLUUID,
	folder_id: LLUUID,
	from_task_id: LLUUID,
	last_owner_id: LLUUID,
	name: Vec<u8>,
	description: Vec<u8>,
	touch_name: Vec<u8>,
	sit_name: Vec<u8>,
	texture_id: Vec<u8>,
}

pub struct ObjectProperties {
	object_data: Vec<ObjectProperties_ObjectData>,
}


pub struct ObjectPropertiesFamily_ObjectData {
	request_flags: u32,
	object_id: LLUUID,
	owner_id: LLUUID,
	group_id: LLUUID,
	base_mask: u32,
	owner_mask: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	ownership_cost: i32,
	sale_type: u8,
	sale_price: i32,
	category: u32,
	last_owner_id: LLUUID,
	name: Vec<u8>,
	description: Vec<u8>,
}

pub struct ObjectPropertiesFamily {
	object_data: ObjectPropertiesFamily_ObjectData,
}


pub struct RequestPayPrice_ObjectData {
	object_id: LLUUID,
}

pub struct RequestPayPrice {
	object_data: RequestPayPrice_ObjectData,
}


pub struct PayPriceReply_ObjectData {
	object_id: LLUUID,
	default_pay_price: i32,
}

pub struct PayPriceReply_ButtonData {
	pay_button: i32,
}

pub struct PayPriceReply {
	object_data: PayPriceReply_ObjectData,
	button_data: Vec<PayPriceReply_ButtonData>,
}


pub struct KickUser_TargetBlock {
	target_ip: IpAddr,
	target_port: IpPort,
}

pub struct KickUser_UserInfo {
	agent_id: LLUUID,
	session_id: LLUUID,
	reason: Vec<u8>,
}

pub struct KickUser {
	target_block: KickUser_TargetBlock,
	user_info: KickUser_UserInfo,
}


pub struct KickUserAck_UserInfo {
	session_id: LLUUID,
	flags: u32,
}

pub struct KickUserAck {
	user_info: KickUserAck_UserInfo,
}


pub struct GodKickUser_UserInfo {
	god_id: LLUUID,
	god_session_id: LLUUID,
	agent_id: LLUUID,
	kick_flags: u32,
	reason: Vec<u8>,
}

pub struct GodKickUser {
	user_info: GodKickUser_UserInfo,
}


pub struct SystemKickUser_AgentInfo {
	agent_id: LLUUID,
}

pub struct SystemKickUser {
	agent_info: Vec<SystemKickUser_AgentInfo>,
}


pub struct EjectUser_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct EjectUser_Data {
	target_id: LLUUID,
	flags: u32,
}

pub struct EjectUser {
	agent_data: EjectUser_AgentData,
	data: EjectUser_Data,
}


pub struct FreezeUser_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct FreezeUser_Data {
	target_id: LLUUID,
	flags: u32,
}

pub struct FreezeUser {
	agent_data: FreezeUser_AgentData,
	data: FreezeUser_Data,
}


pub struct AvatarPropertiesRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	avatar_id: LLUUID,
}

pub struct AvatarPropertiesRequest {
	agent_data: AvatarPropertiesRequest_AgentData,
}


pub struct AvatarPropertiesRequestBackend_AgentData {
	agent_id: LLUUID,
	avatar_id: LLUUID,
	god_level: u8,
	web_profiles_disabled: bool,
}

pub struct AvatarPropertiesRequestBackend {
	agent_data: AvatarPropertiesRequestBackend_AgentData,
}


pub struct AvatarPropertiesReply_AgentData {
	agent_id: LLUUID,
	avatar_id: LLUUID,
}

pub struct AvatarPropertiesReply_PropertiesData {
	image_id: LLUUID,
	fl_image_id: LLUUID,
	partner_id: LLUUID,
	about_text: Vec<u8>,
	fl_about_text: Vec<u8>,
	born_on: Vec<u8>,
	profile_url: Vec<u8>,
	charter_member: Vec<u8>,
	flags: u32,
}

pub struct AvatarPropertiesReply {
	agent_data: AvatarPropertiesReply_AgentData,
	properties_data: AvatarPropertiesReply_PropertiesData,
}


pub struct AvatarInterestsReply_AgentData {
	agent_id: LLUUID,
	avatar_id: LLUUID,
}

pub struct AvatarInterestsReply_PropertiesData {
	want_to_mask: u32,
	want_to_text: Vec<u8>,
	skills_mask: u32,
	skills_text: Vec<u8>,
	languages_text: Vec<u8>,
}

pub struct AvatarInterestsReply {
	agent_data: AvatarInterestsReply_AgentData,
	properties_data: AvatarInterestsReply_PropertiesData,
}


pub struct AvatarGroupsReply_AgentData {
	agent_id: LLUUID,
	avatar_id: LLUUID,
}

pub struct AvatarGroupsReply_GroupData {
	group_powers: u64,
	accept_notices: bool,
	group_title: Vec<u8>,
	group_id: LLUUID,
	group_name: Vec<u8>,
	group_insignia_id: LLUUID,
}

pub struct AvatarGroupsReply_NewGroupData {
	list_in_profile: bool,
}

pub struct AvatarGroupsReply {
	agent_data: AvatarGroupsReply_AgentData,
	group_data: Vec<AvatarGroupsReply_GroupData>,
	new_group_data: AvatarGroupsReply_NewGroupData,
}


pub struct AvatarPropertiesUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct AvatarPropertiesUpdate_PropertiesData {
	image_id: LLUUID,
	fl_image_id: LLUUID,
	about_text: Vec<u8>,
	fl_about_text: Vec<u8>,
	allow_publish: bool,
	mature_publish: bool,
	profile_url: Vec<u8>,
}

pub struct AvatarPropertiesUpdate {
	agent_data: AvatarPropertiesUpdate_AgentData,
	properties_data: AvatarPropertiesUpdate_PropertiesData,
}


pub struct AvatarInterestsUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct AvatarInterestsUpdate_PropertiesData {
	want_to_mask: u32,
	want_to_text: Vec<u8>,
	skills_mask: u32,
	skills_text: Vec<u8>,
	languages_text: Vec<u8>,
}

pub struct AvatarInterestsUpdate {
	agent_data: AvatarInterestsUpdate_AgentData,
	properties_data: AvatarInterestsUpdate_PropertiesData,
}


pub struct AvatarNotesReply_AgentData {
	agent_id: LLUUID,
}

pub struct AvatarNotesReply_Data {
	target_id: LLUUID,
	notes: Vec<u8>,
}

pub struct AvatarNotesReply {
	agent_data: AvatarNotesReply_AgentData,
	data: AvatarNotesReply_Data,
}


pub struct AvatarNotesUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct AvatarNotesUpdate_Data {
	target_id: LLUUID,
	notes: Vec<u8>,
}

pub struct AvatarNotesUpdate {
	agent_data: AvatarNotesUpdate_AgentData,
	data: AvatarNotesUpdate_Data,
}


pub struct AvatarPicksReply_AgentData {
	agent_id: LLUUID,
	target_id: LLUUID,
}

pub struct AvatarPicksReply_Data {
	pick_id: LLUUID,
	pick_name: Vec<u8>,
}

pub struct AvatarPicksReply {
	agent_data: AvatarPicksReply_AgentData,
	data: Vec<AvatarPicksReply_Data>,
}


pub struct EventInfoRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct EventInfoRequest_EventData {
	event_id: u32,
}

pub struct EventInfoRequest {
	agent_data: EventInfoRequest_AgentData,
	event_data: EventInfoRequest_EventData,
}


pub struct EventInfoReply_AgentData {
	agent_id: LLUUID,
}

pub struct EventInfoReply_EventData {
	event_id: u32,
	creator: Vec<u8>,
	name: Vec<u8>,
	category: Vec<u8>,
	desc: Vec<u8>,
	date: Vec<u8>,
	date_utc: u32,
	duration: u32,
	cover: u32,
	amount: u32,
	sim_name: Vec<u8>,
	global_pos: Vector3<f64>,
	event_flags: u32,
}

pub struct EventInfoReply {
	agent_data: EventInfoReply_AgentData,
	event_data: EventInfoReply_EventData,
}


pub struct EventNotificationAddRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct EventNotificationAddRequest_EventData {
	event_id: u32,
}

pub struct EventNotificationAddRequest {
	agent_data: EventNotificationAddRequest_AgentData,
	event_data: EventNotificationAddRequest_EventData,
}


pub struct EventNotificationRemoveRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct EventNotificationRemoveRequest_EventData {
	event_id: u32,
}

pub struct EventNotificationRemoveRequest {
	agent_data: EventNotificationRemoveRequest_AgentData,
	event_data: EventNotificationRemoveRequest_EventData,
}


pub struct EventGodDelete_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct EventGodDelete_EventData {
	event_id: u32,
}

pub struct EventGodDelete_QueryData {
	query_id: LLUUID,
	query_text: Vec<u8>,
	query_flags: u32,
	query_start: i32,
}

pub struct EventGodDelete {
	agent_data: EventGodDelete_AgentData,
	event_data: EventGodDelete_EventData,
	query_data: EventGodDelete_QueryData,
}


pub struct PickInfoReply_AgentData {
	agent_id: LLUUID,
}

pub struct PickInfoReply_Data {
	pick_id: LLUUID,
	creator_id: LLUUID,
	top_pick: bool,
	parcel_id: LLUUID,
	name: Vec<u8>,
	desc: Vec<u8>,
	snapshot_id: LLUUID,
	user: Vec<u8>,
	original_name: Vec<u8>,
	sim_name: Vec<u8>,
	pos_global: Vector3<f64>,
	sort_order: i32,
	enabled: bool,
}

pub struct PickInfoReply {
	agent_data: PickInfoReply_AgentData,
	data: PickInfoReply_Data,
}


pub struct PickInfoUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct PickInfoUpdate_Data {
	pick_id: LLUUID,
	creator_id: LLUUID,
	top_pick: bool,
	parcel_id: LLUUID,
	name: Vec<u8>,
	desc: Vec<u8>,
	snapshot_id: LLUUID,
	pos_global: Vector3<f64>,
	sort_order: i32,
	enabled: bool,
}

pub struct PickInfoUpdate {
	agent_data: PickInfoUpdate_AgentData,
	data: PickInfoUpdate_Data,
}


pub struct PickDelete_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct PickDelete_Data {
	pick_id: LLUUID,
}

pub struct PickDelete {
	agent_data: PickDelete_AgentData,
	data: PickDelete_Data,
}


pub struct PickGodDelete_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct PickGodDelete_Data {
	pick_id: LLUUID,
	query_id: LLUUID,
}

pub struct PickGodDelete {
	agent_data: PickGodDelete_AgentData,
	data: PickGodDelete_Data,
}


pub struct ScriptQuestion_Data {
	task_id: LLUUID,
	item_id: LLUUID,
	object_name: Vec<u8>,
	object_owner: Vec<u8>,
	questions: i32,
}

pub struct ScriptQuestion {
	data: ScriptQuestion_Data,
}


pub struct ScriptControlChange_Data {
	take_controls: bool,
	controls: u32,
	pass_to_agent: bool,
}

pub struct ScriptControlChange {
	data: Vec<ScriptControlChange_Data>,
}


pub struct ScriptDialog_Data {
	object_id: LLUUID,
	first_name: Vec<u8>,
	last_name: Vec<u8>,
	object_name: Vec<u8>,
	message: Vec<u8>,
	chat_channel: i32,
	image_id: LLUUID,
}

pub struct ScriptDialog_Buttons {
	button_label: Vec<u8>,
}

pub struct ScriptDialog_OwnerData {
	owner_id: LLUUID,
}

pub struct ScriptDialog {
	data: ScriptDialog_Data,
	buttons: Vec<ScriptDialog_Buttons>,
	owner_data: Vec<ScriptDialog_OwnerData>,
}


pub struct ScriptDialogReply_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ScriptDialogReply_Data {
	object_id: LLUUID,
	chat_channel: i32,
	button_index: i32,
	button_label: Vec<u8>,
}

pub struct ScriptDialogReply {
	agent_data: ScriptDialogReply_AgentData,
	data: ScriptDialogReply_Data,
}


pub struct ForceScriptControlRelease_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ForceScriptControlRelease {
	agent_data: ForceScriptControlRelease_AgentData,
}


pub struct RevokePermissions_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RevokePermissions_Data {
	object_id: LLUUID,
	object_permissions: u32,
}

pub struct RevokePermissions {
	agent_data: RevokePermissions_AgentData,
	data: RevokePermissions_Data,
}


pub struct LoadURL_Data {
	object_name: Vec<u8>,
	object_id: LLUUID,
	owner_id: LLUUID,
	owner_is_group: bool,
	message: Vec<u8>,
	url: Vec<u8>,
}

pub struct LoadURL {
	data: LoadURL_Data,
}


pub struct ScriptTeleportRequest_Data {
	object_name: Vec<u8>,
	sim_name: Vec<u8>,
	sim_position: Vector3<f32>,
	look_at: Vector3<f32>,
}

pub struct ScriptTeleportRequest {
	data: ScriptTeleportRequest_Data,
}


pub struct ParcelOverlay_ParcelData {
	sequence_id: i32,
	data: Vec<u8>,
}

pub struct ParcelOverlay {
	parcel_data: ParcelOverlay_ParcelData,
}


pub struct ParcelPropertiesRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelPropertiesRequest_ParcelData {
	sequence_id: i32,
	west: f32,
	south: f32,
	east: f32,
	north: f32,
	snap_selection: bool,
}

pub struct ParcelPropertiesRequest {
	agent_data: ParcelPropertiesRequest_AgentData,
	parcel_data: ParcelPropertiesRequest_ParcelData,
}


pub struct ParcelPropertiesRequestByID_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelPropertiesRequestByID_ParcelData {
	sequence_id: i32,
	local_id: i32,
}

pub struct ParcelPropertiesRequestByID {
	agent_data: ParcelPropertiesRequestByID_AgentData,
	parcel_data: ParcelPropertiesRequestByID_ParcelData,
}


pub struct ParcelProperties_ParcelData {
	request_result: i32,
	sequence_id: i32,
	snap_selection: bool,
	self_count: i32,
	other_count: i32,
	public_count: i32,
	local_id: i32,
	owner_id: LLUUID,
	is_group_owned: bool,
	auction_id: u32,
	claim_date: i32,
	claim_price: i32,
	rent_price: i32,
	aabb_min: Vector3<f32>,
	aabb_max: Vector3<f32>,
	bitmap: Vec<u8>,
	area: i32,
	status: u8,
	sim_wide_max_prims: i32,
	sim_wide_total_prims: i32,
	max_prims: i32,
	total_prims: i32,
	owner_prims: i32,
	group_prims: i32,
	other_prims: i32,
	selected_prims: i32,
	parcel_prim_bonus: f32,
	other_clean_time: i32,
	parcel_flags: u32,
	sale_price: i32,
	name: Vec<u8>,
	desc: Vec<u8>,
	music_url: Vec<u8>,
	media_url: Vec<u8>,
	media_id: LLUUID,
	media_auto_scale: u8,
	group_id: LLUUID,
	pass_price: i32,
	pass_hours: f32,
	category: u8,
	auth_buyer_id: LLUUID,
	snapshot_id: LLUUID,
	user_location: Vector3<f32>,
	user_look_at: Vector3<f32>,
	landing_type: u8,
	region_push_override: bool,
	region_deny_anonymous: bool,
	region_deny_identified: bool,
	region_deny_transacted: bool,
}

pub struct ParcelProperties_AgeVerificationBlock {
	region_deny_age_unverified: bool,
}

pub struct ParcelProperties {
	parcel_data: ParcelProperties_ParcelData,
	age_verification_block: ParcelProperties_AgeVerificationBlock,
}


pub struct ParcelPropertiesUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelPropertiesUpdate_ParcelData {
	local_id: i32,
	flags: u32,
	parcel_flags: u32,
	sale_price: i32,
	name: Vec<u8>,
	desc: Vec<u8>,
	music_url: Vec<u8>,
	media_url: Vec<u8>,
	media_id: LLUUID,
	media_auto_scale: u8,
	group_id: LLUUID,
	pass_price: i32,
	pass_hours: f32,
	category: u8,
	auth_buyer_id: LLUUID,
	snapshot_id: LLUUID,
	user_location: Vector3<f32>,
	user_look_at: Vector3<f32>,
	landing_type: u8,
}

pub struct ParcelPropertiesUpdate {
	agent_data: ParcelPropertiesUpdate_AgentData,
	parcel_data: ParcelPropertiesUpdate_ParcelData,
}


pub struct ParcelReturnObjects_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelReturnObjects_ParcelData {
	local_id: i32,
	return_type: u32,
}

pub struct ParcelReturnObjects_TaskIDs {
	task_id: LLUUID,
}

pub struct ParcelReturnObjects_OwnerIDs {
	owner_id: LLUUID,
}

pub struct ParcelReturnObjects {
	agent_data: ParcelReturnObjects_AgentData,
	parcel_data: ParcelReturnObjects_ParcelData,
	task_i_ds: Vec<ParcelReturnObjects_TaskIDs>,
	owner_i_ds: Vec<ParcelReturnObjects_OwnerIDs>,
}


pub struct ParcelSetOtherCleanTime_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelSetOtherCleanTime_ParcelData {
	local_id: i32,
	other_clean_time: i32,
}

pub struct ParcelSetOtherCleanTime {
	agent_data: ParcelSetOtherCleanTime_AgentData,
	parcel_data: ParcelSetOtherCleanTime_ParcelData,
}


pub struct ParcelDisableObjects_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelDisableObjects_ParcelData {
	local_id: i32,
	return_type: u32,
}

pub struct ParcelDisableObjects_TaskIDs {
	task_id: LLUUID,
}

pub struct ParcelDisableObjects_OwnerIDs {
	owner_id: LLUUID,
}

pub struct ParcelDisableObjects {
	agent_data: ParcelDisableObjects_AgentData,
	parcel_data: ParcelDisableObjects_ParcelData,
	task_i_ds: Vec<ParcelDisableObjects_TaskIDs>,
	owner_i_ds: Vec<ParcelDisableObjects_OwnerIDs>,
}


pub struct ParcelSelectObjects_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelSelectObjects_ParcelData {
	local_id: i32,
	return_type: u32,
}

pub struct ParcelSelectObjects_ReturnIDs {
	return_id: LLUUID,
}

pub struct ParcelSelectObjects {
	agent_data: ParcelSelectObjects_AgentData,
	parcel_data: ParcelSelectObjects_ParcelData,
	return_i_ds: Vec<ParcelSelectObjects_ReturnIDs>,
}


pub struct EstateCovenantRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct EstateCovenantRequest {
	agent_data: EstateCovenantRequest_AgentData,
}


pub struct EstateCovenantReply_Data {
	covenant_id: LLUUID,
	covenant_timestamp: u32,
	estate_name: Vec<u8>,
	estate_owner_id: LLUUID,
}

pub struct EstateCovenantReply {
	data: EstateCovenantReply_Data,
}


pub struct ForceObjectSelect_Header {
	reset_list: bool,
}

pub struct ForceObjectSelect_Data {
	local_id: u32,
}

pub struct ForceObjectSelect {
	header: ForceObjectSelect_Header,
	data: Vec<ForceObjectSelect_Data>,
}


pub struct ParcelBuyPass_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelBuyPass_ParcelData {
	local_id: i32,
}

pub struct ParcelBuyPass {
	agent_data: ParcelBuyPass_AgentData,
	parcel_data: ParcelBuyPass_ParcelData,
}


pub struct ParcelDeedToGroup_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelDeedToGroup_Data {
	group_id: LLUUID,
	local_id: i32,
}

pub struct ParcelDeedToGroup {
	agent_data: ParcelDeedToGroup_AgentData,
	data: ParcelDeedToGroup_Data,
}


pub struct ParcelReclaim_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelReclaim_Data {
	local_id: i32,
}

pub struct ParcelReclaim {
	agent_data: ParcelReclaim_AgentData,
	data: ParcelReclaim_Data,
}


pub struct ParcelClaim_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelClaim_Data {
	group_id: LLUUID,
	is_group_owned: bool,
	final_: bool,
}

pub struct ParcelClaim_ParcelData {
	west: f32,
	south: f32,
	east: f32,
	north: f32,
}

pub struct ParcelClaim {
	agent_data: ParcelClaim_AgentData,
	data: ParcelClaim_Data,
	parcel_data: Vec<ParcelClaim_ParcelData>,
}


pub struct ParcelJoin_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelJoin_ParcelData {
	west: f32,
	south: f32,
	east: f32,
	north: f32,
}

pub struct ParcelJoin {
	agent_data: ParcelJoin_AgentData,
	parcel_data: ParcelJoin_ParcelData,
}


pub struct ParcelDivide_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelDivide_ParcelData {
	west: f32,
	south: f32,
	east: f32,
	north: f32,
}

pub struct ParcelDivide {
	agent_data: ParcelDivide_AgentData,
	parcel_data: ParcelDivide_ParcelData,
}


pub struct ParcelRelease_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelRelease_Data {
	local_id: i32,
}

pub struct ParcelRelease {
	agent_data: ParcelRelease_AgentData,
	data: ParcelRelease_Data,
}


pub struct ParcelBuy_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelBuy_Data {
	group_id: LLUUID,
	is_group_owned: bool,
	remove_contribution: bool,
	local_id: i32,
	final_: bool,
}

pub struct ParcelBuy_ParcelData {
	price: i32,
	area: i32,
}

pub struct ParcelBuy {
	agent_data: ParcelBuy_AgentData,
	data: ParcelBuy_Data,
	parcel_data: ParcelBuy_ParcelData,
}


pub struct ParcelGodForceOwner_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelGodForceOwner_Data {
	owner_id: LLUUID,
	local_id: i32,
}

pub struct ParcelGodForceOwner {
	agent_data: ParcelGodForceOwner_AgentData,
	data: ParcelGodForceOwner_Data,
}


pub struct ParcelAccessListRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelAccessListRequest_Data {
	sequence_id: i32,
	flags: u32,
	local_id: i32,
}

pub struct ParcelAccessListRequest {
	agent_data: ParcelAccessListRequest_AgentData,
	data: ParcelAccessListRequest_Data,
}


pub struct ParcelAccessListReply_Data {
	agent_id: LLUUID,
	sequence_id: i32,
	flags: u32,
	local_id: i32,
}

pub struct ParcelAccessListReply_List {
	id: LLUUID,
	time: i32,
	flags: u32,
}

pub struct ParcelAccessListReply {
	data: ParcelAccessListReply_Data,
	list: Vec<ParcelAccessListReply_List>,
}


pub struct ParcelAccessListUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelAccessListUpdate_Data {
	flags: u32,
	local_id: i32,
	transaction_id: LLUUID,
	sequence_id: i32,
	sections: i32,
}

pub struct ParcelAccessListUpdate_List {
	id: LLUUID,
	time: i32,
	flags: u32,
}

pub struct ParcelAccessListUpdate {
	agent_data: ParcelAccessListUpdate_AgentData,
	data: ParcelAccessListUpdate_Data,
	list: Vec<ParcelAccessListUpdate_List>,
}


pub struct ParcelDwellRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelDwellRequest_Data {
	local_id: i32,
	parcel_id: LLUUID,
}

pub struct ParcelDwellRequest {
	agent_data: ParcelDwellRequest_AgentData,
	data: ParcelDwellRequest_Data,
}


pub struct ParcelDwellReply_AgentData {
	agent_id: LLUUID,
}

pub struct ParcelDwellReply_Data {
	local_id: i32,
	parcel_id: LLUUID,
	dwell: f32,
}

pub struct ParcelDwellReply {
	agent_data: ParcelDwellReply_AgentData,
	data: ParcelDwellReply_Data,
}


pub struct RequestParcelTransfer_Data {
	transaction_id: LLUUID,
	transaction_time: u32,
	source_id: LLUUID,
	dest_id: LLUUID,
	owner_id: LLUUID,
	flags: u8,
	transaction_type: i32,
	amount: i32,
	billable_area: i32,
	actual_area: i32,
	final_: bool,
}

pub struct RequestParcelTransfer_RegionData {
	region_id: LLUUID,
	grid_x: u32,
	grid_y: u32,
}

pub struct RequestParcelTransfer {
	data: RequestParcelTransfer_Data,
	region_data: RequestParcelTransfer_RegionData,
}


pub struct UpdateParcel_ParcelData {
	parcel_id: LLUUID,
	region_handle: u64,
	owner_id: LLUUID,
	group_owned: bool,
	status: u8,
	name: Vec<u8>,
	description: Vec<u8>,
	music_url: Vec<u8>,
	region_x: f32,
	region_y: f32,
	actual_area: i32,
	billable_area: i32,
	show_dir: bool,
	is_for_sale: bool,
	category: u8,
	snapshot_id: LLUUID,
	user_location: Vector3<f32>,
	sale_price: i32,
	authorized_buyer_id: LLUUID,
	allow_publish: bool,
	mature_publish: bool,
}

pub struct UpdateParcel {
	parcel_data: UpdateParcel_ParcelData,
}


pub struct RemoveParcel_ParcelData {
	parcel_id: LLUUID,
}

pub struct RemoveParcel {
	parcel_data: Vec<RemoveParcel_ParcelData>,
}


pub struct MergeParcel_MasterParcelData {
	master_id: LLUUID,
}

pub struct MergeParcel_SlaveParcelData {
	slave_id: LLUUID,
}

pub struct MergeParcel {
	master_parcel_data: MergeParcel_MasterParcelData,
	slave_parcel_data: Vec<MergeParcel_SlaveParcelData>,
}


pub struct LogParcelChanges_AgentData {
	agent_id: LLUUID,
}

pub struct LogParcelChanges_RegionData {
	region_handle: u64,
}

pub struct LogParcelChanges_ParcelData {
	parcel_id: LLUUID,
	owner_id: LLUUID,
	is_owner_group: bool,
	actual_area: i32,
	action: i8,
	transaction_id: LLUUID,
}

pub struct LogParcelChanges {
	agent_data: LogParcelChanges_AgentData,
	region_data: LogParcelChanges_RegionData,
	parcel_data: Vec<LogParcelChanges_ParcelData>,
}


pub struct CheckParcelSales_RegionData {
	region_handle: u64,
}

pub struct CheckParcelSales {
	region_data: Vec<CheckParcelSales_RegionData>,
}


pub struct ParcelSales_ParcelData {
	parcel_id: LLUUID,
	buyer_id: LLUUID,
}

pub struct ParcelSales {
	parcel_data: Vec<ParcelSales_ParcelData>,
}


pub struct ParcelGodMarkAsContent_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ParcelGodMarkAsContent_ParcelData {
	local_id: i32,
}

pub struct ParcelGodMarkAsContent {
	agent_data: ParcelGodMarkAsContent_AgentData,
	parcel_data: ParcelGodMarkAsContent_ParcelData,
}


pub struct ViewerStartAuction_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ViewerStartAuction_ParcelData {
	local_id: i32,
	snapshot_id: LLUUID,
}

pub struct ViewerStartAuction {
	agent_data: ViewerStartAuction_AgentData,
	parcel_data: ViewerStartAuction_ParcelData,
}


pub struct StartAuction_AgentData {
	agent_id: LLUUID,
}

pub struct StartAuction_ParcelData {
	parcel_id: LLUUID,
	snapshot_id: LLUUID,
	name: Vec<u8>,
}

pub struct StartAuction {
	agent_data: StartAuction_AgentData,
	parcel_data: StartAuction_ParcelData,
}


pub struct ConfirmAuctionStart_AuctionData {
	parcel_id: LLUUID,
	auction_id: u32,
}

pub struct ConfirmAuctionStart {
	auction_data: ConfirmAuctionStart_AuctionData,
}


pub struct CompleteAuction_ParcelData {
	parcel_id: LLUUID,
}

pub struct CompleteAuction {
	parcel_data: Vec<CompleteAuction_ParcelData>,
}


pub struct CancelAuction_ParcelData {
	parcel_id: LLUUID,
}

pub struct CancelAuction {
	parcel_data: Vec<CancelAuction_ParcelData>,
}


pub struct CheckParcelAuctions_RegionData {
	region_handle: u64,
}

pub struct CheckParcelAuctions {
	region_data: Vec<CheckParcelAuctions_RegionData>,
}


pub struct ParcelAuctions_ParcelData {
	parcel_id: LLUUID,
	winner_id: LLUUID,
}

pub struct ParcelAuctions {
	parcel_data: Vec<ParcelAuctions_ParcelData>,
}


pub struct UUIDNameRequest_UUIDNameBlock {
	id: LLUUID,
}

pub struct UUIDNameRequest {
	uuid_name_block: Vec<UUIDNameRequest_UUIDNameBlock>,
}


pub struct UUIDNameReply_UUIDNameBlock {
	id: LLUUID,
	first_name: Vec<u8>,
	last_name: Vec<u8>,
}

pub struct UUIDNameReply {
	uuid_name_block: Vec<UUIDNameReply_UUIDNameBlock>,
}


pub struct UUIDGroupNameRequest_UUIDNameBlock {
	id: LLUUID,
}

pub struct UUIDGroupNameRequest {
	uuid_name_block: Vec<UUIDGroupNameRequest_UUIDNameBlock>,
}


pub struct UUIDGroupNameReply_UUIDNameBlock {
	id: LLUUID,
	group_name: Vec<u8>,
}

pub struct UUIDGroupNameReply {
	uuid_name_block: Vec<UUIDGroupNameReply_UUIDNameBlock>,
}


pub struct ChatPass_ChatData {
	channel: i32,
	position: Vector3<f32>,
	id: LLUUID,
	owner_id: LLUUID,
	name: Vec<u8>,
	source_type: u8,
	type_: u8,
	radius: f32,
	sim_access: u8,
	message: Vec<u8>,
}

pub struct ChatPass {
	chat_data: ChatPass_ChatData,
}


pub struct EdgeDataPacket_EdgeData {
	layer_type: u8,
	direction: u8,
	layer_data: Vec<u8>,
}

pub struct EdgeDataPacket {
	edge_data: EdgeDataPacket_EdgeData,
}


pub struct SimStatus_SimStatus {
	can_accept_agents: bool,
	can_accept_tasks: bool,
}

pub struct SimStatus {
	sim_status: SimStatus_SimStatus,
}


pub struct ChildAgentUpdate_AgentData {
	region_handle: u64,
	viewer_circuit_code: u32,
	agent_id: LLUUID,
	session_id: LLUUID,
	agent_pos: Vector3<f32>,
	agent_vel: Vector3<f32>,
	center: Vector3<f32>,
	size: Vector3<f32>,
	at_axis: Vector3<f32>,
	left_axis: Vector3<f32>,
	up_axis: Vector3<f32>,
	changed_grid: bool,
	far: f32,
	aspect: f32,
	throttles: Vec<u8>,
	locomotion_state: u32,
	head_rotation: Quaternion<f32>,
	body_rotation: Quaternion<f32>,
	control_flags: u32,
	energy_level: f32,
	god_level: u8,
	always_run: bool,
	prey_agent: LLUUID,
	agent_access: u8,
	agent_textures: Vec<u8>,
	active_group_id: LLUUID,
}

pub struct ChildAgentUpdate_GroupData {
	group_id: LLUUID,
	group_powers: u64,
	accept_notices: bool,
}

pub struct ChildAgentUpdate_AnimationData {
	animation: LLUUID,
	object_id: LLUUID,
}

pub struct ChildAgentUpdate_GranterBlock {
	granter_id: LLUUID,
}

pub struct ChildAgentUpdate_NVPairData {
	nv_pairs: Vec<u8>,
}

pub struct ChildAgentUpdate_VisualParam {
	param_value: u8,
}

pub struct ChildAgentUpdate_AgentAccess {
	agent_legacy_access: u8,
	agent_max_access: u8,
}

pub struct ChildAgentUpdate_AgentInfo {
	flags: u32,
}

pub struct ChildAgentUpdate {
	agent_data: ChildAgentUpdate_AgentData,
	group_data: Vec<ChildAgentUpdate_GroupData>,
	animation_data: Vec<ChildAgentUpdate_AnimationData>,
	granter_block: Vec<ChildAgentUpdate_GranterBlock>,
	nv_pair_data: Vec<ChildAgentUpdate_NVPairData>,
	visual_param: Vec<ChildAgentUpdate_VisualParam>,
	agent_access: Vec<ChildAgentUpdate_AgentAccess>,
	agent_info: Vec<ChildAgentUpdate_AgentInfo>,
}


pub struct ChildAgentAlive_AgentData {
	region_handle: u64,
	viewer_circuit_code: u32,
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ChildAgentAlive {
	agent_data: ChildAgentAlive_AgentData,
}


pub struct ChildAgentPositionUpdate_AgentData {
	region_handle: u64,
	viewer_circuit_code: u32,
	agent_id: LLUUID,
	session_id: LLUUID,
	agent_pos: Vector3<f32>,
	agent_vel: Vector3<f32>,
	center: Vector3<f32>,
	size: Vector3<f32>,
	at_axis: Vector3<f32>,
	left_axis: Vector3<f32>,
	up_axis: Vector3<f32>,
	changed_grid: bool,
}

pub struct ChildAgentPositionUpdate {
	agent_data: ChildAgentPositionUpdate_AgentData,
}


pub struct ChildAgentDying_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ChildAgentDying {
	agent_data: ChildAgentDying_AgentData,
}


pub struct ChildAgentUnknown_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ChildAgentUnknown {
	agent_data: ChildAgentUnknown_AgentData,
}


pub struct AtomicPassObject_TaskData {
	task_id: LLUUID,
	attachment_needs_save: bool,
}

pub struct AtomicPassObject {
	task_data: AtomicPassObject_TaskData,
}


pub struct KillChildAgents_IDBlock {
	agent_id: LLUUID,
}

pub struct KillChildAgents {
	id_block: KillChildAgents_IDBlock,
}


pub struct GetScriptRunning_Script {
	object_id: LLUUID,
	item_id: LLUUID,
}

pub struct GetScriptRunning {
	script: GetScriptRunning_Script,
}


pub struct ScriptRunningReply_Script {
	object_id: LLUUID,
	item_id: LLUUID,
	running: bool,
}

pub struct ScriptRunningReply {
	script: ScriptRunningReply_Script,
}


pub struct SetScriptRunning_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct SetScriptRunning_Script {
	object_id: LLUUID,
	item_id: LLUUID,
	running: bool,
}

pub struct SetScriptRunning {
	agent_data: SetScriptRunning_AgentData,
	script: SetScriptRunning_Script,
}


pub struct ScriptReset_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ScriptReset_Script {
	object_id: LLUUID,
	item_id: LLUUID,
}

pub struct ScriptReset {
	agent_data: ScriptReset_AgentData,
	script: ScriptReset_Script,
}


pub struct ScriptSensorRequest_Requester {
	source_id: LLUUID,
	request_id: LLUUID,
	search_id: LLUUID,
	search_pos: Vector3<f32>,
	search_dir: Quaternion<f32>,
	search_name: Vec<u8>,
	type_: i32,
	range: f32,
	arc: f32,
	region_handle: u64,
	search_regions: u8,
}

pub struct ScriptSensorRequest {
	requester: ScriptSensorRequest_Requester,
}


pub struct ScriptSensorReply_Requester {
	source_id: LLUUID,
}

pub struct ScriptSensorReply_SensedData {
	object_id: LLUUID,
	owner_id: LLUUID,
	group_id: LLUUID,
	position: Vector3<f32>,
	velocity: Vector3<f32>,
	rotation: Quaternion<f32>,
	name: Vec<u8>,
	type_: i32,
	range: f32,
}

pub struct ScriptSensorReply {
	requester: ScriptSensorReply_Requester,
	sensed_data: Vec<ScriptSensorReply_SensedData>,
}


pub struct CompleteAgentMovement_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	circuit_code: u32,
}

pub struct CompleteAgentMovement {
	agent_data: CompleteAgentMovement_AgentData,
}


pub struct AgentMovementComplete_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct AgentMovementComplete_Data {
	position: Vector3<f32>,
	look_at: Vector3<f32>,
	region_handle: u64,
	timestamp: u32,
}

pub struct AgentMovementComplete_SimData {
	channel_version: Vec<u8>,
}

pub struct AgentMovementComplete {
	agent_data: AgentMovementComplete_AgentData,
	data: AgentMovementComplete_Data,
	sim_data: AgentMovementComplete_SimData,
}


pub struct DataServerLogout_UserData {
	agent_id: LLUUID,
	viewer_ip: IpAddr,
	disconnect: bool,
	session_id: LLUUID,
}

pub struct DataServerLogout {
	user_data: DataServerLogout_UserData,
}


pub struct LogoutRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct LogoutRequest {
	agent_data: LogoutRequest_AgentData,
}


pub struct LogoutReply_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct LogoutReply_InventoryData {
	item_id: LLUUID,
}

pub struct LogoutReply {
	agent_data: LogoutReply_AgentData,
	inventory_data: Vec<LogoutReply_InventoryData>,
}


pub struct ImprovedInstantMessage_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ImprovedInstantMessage_MessageBlock {
	from_group: bool,
	to_agent_id: LLUUID,
	parent_estate_id: u32,
	region_id: LLUUID,
	position: Vector3<f32>,
	offline: u8,
	dialog: u8,
	id: LLUUID,
	timestamp: u32,
	from_agent_name: Vec<u8>,
	message: Vec<u8>,
	binary_bucket: Vec<u8>,
}

pub struct ImprovedInstantMessage {
	agent_data: ImprovedInstantMessage_AgentData,
	message_block: ImprovedInstantMessage_MessageBlock,
}


pub struct RetrieveInstantMessages_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RetrieveInstantMessages {
	agent_data: RetrieveInstantMessages_AgentData,
}


pub struct FindAgent_AgentBlock {
	hunter: LLUUID,
	prey: LLUUID,
	space_ip: IpAddr,
}

pub struct FindAgent_LocationBlock {
	global_x: f64,
	global_y: f64,
}

pub struct FindAgent {
	agent_block: FindAgent_AgentBlock,
	location_block: Vec<FindAgent_LocationBlock>,
}


pub struct RequestGodlikePowers_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RequestGodlikePowers_RequestBlock {
	godlike: bool,
	token: LLUUID,
}

pub struct RequestGodlikePowers {
	agent_data: RequestGodlikePowers_AgentData,
	request_block: RequestGodlikePowers_RequestBlock,
}


pub struct GrantGodlikePowers_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct GrantGodlikePowers_GrantData {
	god_level: u8,
	token: LLUUID,
}

pub struct GrantGodlikePowers {
	agent_data: GrantGodlikePowers_AgentData,
	grant_data: GrantGodlikePowers_GrantData,
}


pub struct GodlikeMessage_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	transaction_id: LLUUID,
}

pub struct GodlikeMessage_MethodData {
	method: Vec<u8>,
	invoice: LLUUID,
}

pub struct GodlikeMessage_ParamList {
	parameter: Vec<u8>,
}

pub struct GodlikeMessage {
	agent_data: GodlikeMessage_AgentData,
	method_data: GodlikeMessage_MethodData,
	param_list: Vec<GodlikeMessage_ParamList>,
}


pub struct EstateOwnerMessage_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	transaction_id: LLUUID,
}

pub struct EstateOwnerMessage_MethodData {
	method: Vec<u8>,
	invoice: LLUUID,
}

pub struct EstateOwnerMessage_ParamList {
	parameter: Vec<u8>,
}

pub struct EstateOwnerMessage {
	agent_data: EstateOwnerMessage_AgentData,
	method_data: EstateOwnerMessage_MethodData,
	param_list: Vec<EstateOwnerMessage_ParamList>,
}


pub struct GenericMessage_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	transaction_id: LLUUID,
}

pub struct GenericMessage_MethodData {
	method: Vec<u8>,
	invoice: LLUUID,
}

pub struct GenericMessage_ParamList {
	parameter: Vec<u8>,
}

pub struct GenericMessage {
	agent_data: GenericMessage_AgentData,
	method_data: GenericMessage_MethodData,
	param_list: Vec<GenericMessage_ParamList>,
}


pub struct MuteListRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct MuteListRequest_MuteData {
	mute_crc: u32,
}

pub struct MuteListRequest {
	agent_data: MuteListRequest_AgentData,
	mute_data: MuteListRequest_MuteData,
}


pub struct UpdateMuteListEntry_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct UpdateMuteListEntry_MuteData {
	mute_id: LLUUID,
	mute_name: Vec<u8>,
	mute_type: i32,
	mute_flags: u32,
}

pub struct UpdateMuteListEntry {
	agent_data: UpdateMuteListEntry_AgentData,
	mute_data: UpdateMuteListEntry_MuteData,
}


pub struct RemoveMuteListEntry_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RemoveMuteListEntry_MuteData {
	mute_id: LLUUID,
	mute_name: Vec<u8>,
}

pub struct RemoveMuteListEntry {
	agent_data: RemoveMuteListEntry_AgentData,
	mute_data: RemoveMuteListEntry_MuteData,
}


pub struct CopyInventoryFromNotecard_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct CopyInventoryFromNotecard_NotecardData {
	notecard_item_id: LLUUID,
	object_id: LLUUID,
}

pub struct CopyInventoryFromNotecard_InventoryData {
	item_id: LLUUID,
	folder_id: LLUUID,
}

pub struct CopyInventoryFromNotecard {
	agent_data: CopyInventoryFromNotecard_AgentData,
	notecard_data: CopyInventoryFromNotecard_NotecardData,
	inventory_data: Vec<CopyInventoryFromNotecard_InventoryData>,
}


pub struct UpdateInventoryItem_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	transaction_id: LLUUID,
}

pub struct UpdateInventoryItem_InventoryData {
	item_id: LLUUID,
	folder_id: LLUUID,
	callback_id: u32,
	creator_id: LLUUID,
	owner_id: LLUUID,
	group_id: LLUUID,
	base_mask: u32,
	owner_mask: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	group_owned: bool,
	transaction_id: LLUUID,
	type_: i8,
	inv_type: i8,
	flags: u32,
	sale_type: u8,
	sale_price: i32,
	name: Vec<u8>,
	description: Vec<u8>,
	creation_date: i32,
	crc: u32,
}

pub struct UpdateInventoryItem {
	agent_data: UpdateInventoryItem_AgentData,
	inventory_data: Vec<UpdateInventoryItem_InventoryData>,
}


pub struct UpdateCreateInventoryItem_AgentData {
	agent_id: LLUUID,
	sim_approved: bool,
	transaction_id: LLUUID,
}

pub struct UpdateCreateInventoryItem_InventoryData {
	item_id: LLUUID,
	folder_id: LLUUID,
	callback_id: u32,
	creator_id: LLUUID,
	owner_id: LLUUID,
	group_id: LLUUID,
	base_mask: u32,
	owner_mask: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	group_owned: bool,
	asset_id: LLUUID,
	type_: i8,
	inv_type: i8,
	flags: u32,
	sale_type: u8,
	sale_price: i32,
	name: Vec<u8>,
	description: Vec<u8>,
	creation_date: i32,
	crc: u32,
}

pub struct UpdateCreateInventoryItem {
	agent_data: UpdateCreateInventoryItem_AgentData,
	inventory_data: Vec<UpdateCreateInventoryItem_InventoryData>,
}


pub struct MoveInventoryItem_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	stamp: bool,
}

pub struct MoveInventoryItem_InventoryData {
	item_id: LLUUID,
	folder_id: LLUUID,
	new_name: Vec<u8>,
}

pub struct MoveInventoryItem {
	agent_data: MoveInventoryItem_AgentData,
	inventory_data: Vec<MoveInventoryItem_InventoryData>,
}


pub struct CopyInventoryItem_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct CopyInventoryItem_InventoryData {
	callback_id: u32,
	old_agent_id: LLUUID,
	old_item_id: LLUUID,
	new_folder_id: LLUUID,
	new_name: Vec<u8>,
}

pub struct CopyInventoryItem {
	agent_data: CopyInventoryItem_AgentData,
	inventory_data: Vec<CopyInventoryItem_InventoryData>,
}


pub struct RemoveInventoryItem_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RemoveInventoryItem_InventoryData {
	item_id: LLUUID,
}

pub struct RemoveInventoryItem {
	agent_data: RemoveInventoryItem_AgentData,
	inventory_data: Vec<RemoveInventoryItem_InventoryData>,
}


pub struct ChangeInventoryItemFlags_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ChangeInventoryItemFlags_InventoryData {
	item_id: LLUUID,
	flags: u32,
}

pub struct ChangeInventoryItemFlags {
	agent_data: ChangeInventoryItemFlags_AgentData,
	inventory_data: Vec<ChangeInventoryItemFlags_InventoryData>,
}


pub struct SaveAssetIntoInventory_AgentData {
	agent_id: LLUUID,
}

pub struct SaveAssetIntoInventory_InventoryData {
	item_id: LLUUID,
	new_asset_id: LLUUID,
}

pub struct SaveAssetIntoInventory {
	agent_data: SaveAssetIntoInventory_AgentData,
	inventory_data: SaveAssetIntoInventory_InventoryData,
}


pub struct CreateInventoryFolder_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct CreateInventoryFolder_FolderData {
	folder_id: LLUUID,
	parent_id: LLUUID,
	type_: i8,
	name: Vec<u8>,
}

pub struct CreateInventoryFolder {
	agent_data: CreateInventoryFolder_AgentData,
	folder_data: CreateInventoryFolder_FolderData,
}


pub struct UpdateInventoryFolder_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct UpdateInventoryFolder_FolderData {
	folder_id: LLUUID,
	parent_id: LLUUID,
	type_: i8,
	name: Vec<u8>,
}

pub struct UpdateInventoryFolder {
	agent_data: UpdateInventoryFolder_AgentData,
	folder_data: Vec<UpdateInventoryFolder_FolderData>,
}


pub struct MoveInventoryFolder_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	stamp: bool,
}

pub struct MoveInventoryFolder_InventoryData {
	folder_id: LLUUID,
	parent_id: LLUUID,
}

pub struct MoveInventoryFolder {
	agent_data: MoveInventoryFolder_AgentData,
	inventory_data: Vec<MoveInventoryFolder_InventoryData>,
}


pub struct RemoveInventoryFolder_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RemoveInventoryFolder_FolderData {
	folder_id: LLUUID,
}

pub struct RemoveInventoryFolder {
	agent_data: RemoveInventoryFolder_AgentData,
	folder_data: Vec<RemoveInventoryFolder_FolderData>,
}


pub struct FetchInventoryDescendents_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct FetchInventoryDescendents_InventoryData {
	folder_id: LLUUID,
	owner_id: LLUUID,
	sort_order: i32,
	fetch_folders: bool,
	fetch_items: bool,
}

pub struct FetchInventoryDescendents {
	agent_data: FetchInventoryDescendents_AgentData,
	inventory_data: FetchInventoryDescendents_InventoryData,
}


pub struct InventoryDescendents_AgentData {
	agent_id: LLUUID,
	folder_id: LLUUID,
	owner_id: LLUUID,
	version: i32,
	descendents: i32,
}

pub struct InventoryDescendents_FolderData {
	folder_id: LLUUID,
	parent_id: LLUUID,
	type_: i8,
	name: Vec<u8>,
}

pub struct InventoryDescendents_ItemData {
	item_id: LLUUID,
	folder_id: LLUUID,
	creator_id: LLUUID,
	owner_id: LLUUID,
	group_id: LLUUID,
	base_mask: u32,
	owner_mask: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	group_owned: bool,
	asset_id: LLUUID,
	type_: i8,
	inv_type: i8,
	flags: u32,
	sale_type: u8,
	sale_price: i32,
	name: Vec<u8>,
	description: Vec<u8>,
	creation_date: i32,
	crc: u32,
}

pub struct InventoryDescendents {
	agent_data: InventoryDescendents_AgentData,
	folder_data: Vec<InventoryDescendents_FolderData>,
	item_data: Vec<InventoryDescendents_ItemData>,
}


pub struct FetchInventory_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct FetchInventory_InventoryData {
	owner_id: LLUUID,
	item_id: LLUUID,
}

pub struct FetchInventory {
	agent_data: FetchInventory_AgentData,
	inventory_data: Vec<FetchInventory_InventoryData>,
}


pub struct FetchInventoryReply_AgentData {
	agent_id: LLUUID,
}

pub struct FetchInventoryReply_InventoryData {
	item_id: LLUUID,
	folder_id: LLUUID,
	creator_id: LLUUID,
	owner_id: LLUUID,
	group_id: LLUUID,
	base_mask: u32,
	owner_mask: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	group_owned: bool,
	asset_id: LLUUID,
	type_: i8,
	inv_type: i8,
	flags: u32,
	sale_type: u8,
	sale_price: i32,
	name: Vec<u8>,
	description: Vec<u8>,
	creation_date: i32,
	crc: u32,
}

pub struct FetchInventoryReply {
	agent_data: FetchInventoryReply_AgentData,
	inventory_data: Vec<FetchInventoryReply_InventoryData>,
}


pub struct BulkUpdateInventory_AgentData {
	agent_id: LLUUID,
	transaction_id: LLUUID,
}

pub struct BulkUpdateInventory_FolderData {
	folder_id: LLUUID,
	parent_id: LLUUID,
	type_: i8,
	name: Vec<u8>,
}

pub struct BulkUpdateInventory_ItemData {
	item_id: LLUUID,
	callback_id: u32,
	folder_id: LLUUID,
	creator_id: LLUUID,
	owner_id: LLUUID,
	group_id: LLUUID,
	base_mask: u32,
	owner_mask: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	group_owned: bool,
	asset_id: LLUUID,
	type_: i8,
	inv_type: i8,
	flags: u32,
	sale_type: u8,
	sale_price: i32,
	name: Vec<u8>,
	description: Vec<u8>,
	creation_date: i32,
	crc: u32,
}

pub struct BulkUpdateInventory {
	agent_data: BulkUpdateInventory_AgentData,
	folder_data: Vec<BulkUpdateInventory_FolderData>,
	item_data: Vec<BulkUpdateInventory_ItemData>,
}


pub struct RequestInventoryAsset_QueryData {
	query_id: LLUUID,
	agent_id: LLUUID,
	owner_id: LLUUID,
	item_id: LLUUID,
}

pub struct RequestInventoryAsset {
	query_data: RequestInventoryAsset_QueryData,
}


pub struct InventoryAssetResponse_QueryData {
	query_id: LLUUID,
	asset_id: LLUUID,
	is_readable: bool,
}

pub struct InventoryAssetResponse {
	query_data: InventoryAssetResponse_QueryData,
}


pub struct RemoveInventoryObjects_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RemoveInventoryObjects_FolderData {
	folder_id: LLUUID,
}

pub struct RemoveInventoryObjects_ItemData {
	item_id: LLUUID,
}

pub struct RemoveInventoryObjects {
	agent_data: RemoveInventoryObjects_AgentData,
	folder_data: Vec<RemoveInventoryObjects_FolderData>,
	item_data: Vec<RemoveInventoryObjects_ItemData>,
}


pub struct PurgeInventoryDescendents_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct PurgeInventoryDescendents_InventoryData {
	folder_id: LLUUID,
}

pub struct PurgeInventoryDescendents {
	agent_data: PurgeInventoryDescendents_AgentData,
	inventory_data: PurgeInventoryDescendents_InventoryData,
}


pub struct UpdateTaskInventory_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct UpdateTaskInventory_UpdateData {
	local_id: u32,
	key: u8,
}

pub struct UpdateTaskInventory_InventoryData {
	item_id: LLUUID,
	folder_id: LLUUID,
	creator_id: LLUUID,
	owner_id: LLUUID,
	group_id: LLUUID,
	base_mask: u32,
	owner_mask: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	group_owned: bool,
	transaction_id: LLUUID,
	type_: i8,
	inv_type: i8,
	flags: u32,
	sale_type: u8,
	sale_price: i32,
	name: Vec<u8>,
	description: Vec<u8>,
	creation_date: i32,
	crc: u32,
}

pub struct UpdateTaskInventory {
	agent_data: UpdateTaskInventory_AgentData,
	update_data: UpdateTaskInventory_UpdateData,
	inventory_data: UpdateTaskInventory_InventoryData,
}


pub struct RemoveTaskInventory_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RemoveTaskInventory_InventoryData {
	local_id: u32,
	item_id: LLUUID,
}

pub struct RemoveTaskInventory {
	agent_data: RemoveTaskInventory_AgentData,
	inventory_data: RemoveTaskInventory_InventoryData,
}


pub struct MoveTaskInventory_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	folder_id: LLUUID,
}

pub struct MoveTaskInventory_InventoryData {
	local_id: u32,
	item_id: LLUUID,
}

pub struct MoveTaskInventory {
	agent_data: MoveTaskInventory_AgentData,
	inventory_data: MoveTaskInventory_InventoryData,
}


pub struct RequestTaskInventory_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RequestTaskInventory_InventoryData {
	local_id: u32,
}

pub struct RequestTaskInventory {
	agent_data: RequestTaskInventory_AgentData,
	inventory_data: RequestTaskInventory_InventoryData,
}


pub struct ReplyTaskInventory_InventoryData {
	task_id: LLUUID,
	serial: i16,
	filename: Vec<u8>,
}

pub struct ReplyTaskInventory {
	inventory_data: ReplyTaskInventory_InventoryData,
}


pub struct DeRezObject_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct DeRezObject_AgentBlock {
	group_id: LLUUID,
	destination: u8,
	destination_id: LLUUID,
	transaction_id: LLUUID,
	packet_count: u8,
	packet_number: u8,
}

pub struct DeRezObject_ObjectData {
	object_local_id: u32,
}

pub struct DeRezObject {
	agent_data: DeRezObject_AgentData,
	agent_block: DeRezObject_AgentBlock,
	object_data: Vec<DeRezObject_ObjectData>,
}


pub struct DeRezAck_TransactionData {
	transaction_id: LLUUID,
	success: bool,
}

pub struct DeRezAck {
	transaction_data: DeRezAck_TransactionData,
}


pub struct RezObject_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct RezObject_RezData {
	from_task_id: LLUUID,
	bypass_raycast: u8,
	ray_start: Vector3<f32>,
	ray_end: Vector3<f32>,
	ray_target_id: LLUUID,
	ray_end_is_intersection: bool,
	rez_selected: bool,
	remove_item: bool,
	item_flags: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
}

pub struct RezObject_InventoryData {
	item_id: LLUUID,
	folder_id: LLUUID,
	creator_id: LLUUID,
	owner_id: LLUUID,
	group_id: LLUUID,
	base_mask: u32,
	owner_mask: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	group_owned: bool,
	transaction_id: LLUUID,
	type_: i8,
	inv_type: i8,
	flags: u32,
	sale_type: u8,
	sale_price: i32,
	name: Vec<u8>,
	description: Vec<u8>,
	creation_date: i32,
	crc: u32,
}

pub struct RezObject {
	agent_data: RezObject_AgentData,
	rez_data: RezObject_RezData,
	inventory_data: RezObject_InventoryData,
}


pub struct RezObjectFromNotecard_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct RezObjectFromNotecard_RezData {
	from_task_id: LLUUID,
	bypass_raycast: u8,
	ray_start: Vector3<f32>,
	ray_end: Vector3<f32>,
	ray_target_id: LLUUID,
	ray_end_is_intersection: bool,
	rez_selected: bool,
	remove_item: bool,
	item_flags: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
}

pub struct RezObjectFromNotecard_NotecardData {
	notecard_item_id: LLUUID,
	object_id: LLUUID,
}

pub struct RezObjectFromNotecard_InventoryData {
	item_id: LLUUID,
}

pub struct RezObjectFromNotecard {
	agent_data: RezObjectFromNotecard_AgentData,
	rez_data: RezObjectFromNotecard_RezData,
	notecard_data: RezObjectFromNotecard_NotecardData,
	inventory_data: Vec<RezObjectFromNotecard_InventoryData>,
}


pub struct TransferInventory_InfoBlock {
	source_id: LLUUID,
	dest_id: LLUUID,
	transaction_id: LLUUID,
}

pub struct TransferInventory_InventoryBlock {
	inventory_id: LLUUID,
	type_: i8,
}

pub struct TransferInventory {
	info_block: TransferInventory_InfoBlock,
	inventory_block: Vec<TransferInventory_InventoryBlock>,
}


pub struct TransferInventoryAck_InfoBlock {
	transaction_id: LLUUID,
	inventory_id: LLUUID,
}

pub struct TransferInventoryAck {
	info_block: TransferInventoryAck_InfoBlock,
}


pub struct AcceptFriendship_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct AcceptFriendship_TransactionBlock {
	transaction_id: LLUUID,
}

pub struct AcceptFriendship_FolderData {
	folder_id: LLUUID,
}

pub struct AcceptFriendship {
	agent_data: AcceptFriendship_AgentData,
	transaction_block: AcceptFriendship_TransactionBlock,
	folder_data: Vec<AcceptFriendship_FolderData>,
}


pub struct DeclineFriendship_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct DeclineFriendship_TransactionBlock {
	transaction_id: LLUUID,
}

pub struct DeclineFriendship {
	agent_data: DeclineFriendship_AgentData,
	transaction_block: DeclineFriendship_TransactionBlock,
}


pub struct FormFriendship_AgentBlock {
	source_id: LLUUID,
	dest_id: LLUUID,
}

pub struct FormFriendship {
	agent_block: FormFriendship_AgentBlock,
}


pub struct TerminateFriendship_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct TerminateFriendship_ExBlock {
	other_id: LLUUID,
}

pub struct TerminateFriendship {
	agent_data: TerminateFriendship_AgentData,
	ex_block: TerminateFriendship_ExBlock,
}


pub struct OfferCallingCard_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct OfferCallingCard_AgentBlock {
	dest_id: LLUUID,
	transaction_id: LLUUID,
}

pub struct OfferCallingCard {
	agent_data: OfferCallingCard_AgentData,
	agent_block: OfferCallingCard_AgentBlock,
}


pub struct AcceptCallingCard_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct AcceptCallingCard_TransactionBlock {
	transaction_id: LLUUID,
}

pub struct AcceptCallingCard_FolderData {
	folder_id: LLUUID,
}

pub struct AcceptCallingCard {
	agent_data: AcceptCallingCard_AgentData,
	transaction_block: AcceptCallingCard_TransactionBlock,
	folder_data: Vec<AcceptCallingCard_FolderData>,
}


pub struct DeclineCallingCard_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct DeclineCallingCard_TransactionBlock {
	transaction_id: LLUUID,
}

pub struct DeclineCallingCard {
	agent_data: DeclineCallingCard_AgentData,
	transaction_block: DeclineCallingCard_TransactionBlock,
}


pub struct RezScript_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct RezScript_UpdateBlock {
	object_local_id: u32,
	enabled: bool,
}

pub struct RezScript_InventoryBlock {
	item_id: LLUUID,
	folder_id: LLUUID,
	creator_id: LLUUID,
	owner_id: LLUUID,
	group_id: LLUUID,
	base_mask: u32,
	owner_mask: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	group_owned: bool,
	transaction_id: LLUUID,
	type_: i8,
	inv_type: i8,
	flags: u32,
	sale_type: u8,
	sale_price: i32,
	name: Vec<u8>,
	description: Vec<u8>,
	creation_date: i32,
	crc: u32,
}

pub struct RezScript {
	agent_data: RezScript_AgentData,
	update_block: RezScript_UpdateBlock,
	inventory_block: RezScript_InventoryBlock,
}


pub struct CreateInventoryItem_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct CreateInventoryItem_InventoryBlock {
	callback_id: u32,
	folder_id: LLUUID,
	transaction_id: LLUUID,
	next_owner_mask: u32,
	type_: i8,
	inv_type: i8,
	wearable_type: u8,
	name: Vec<u8>,
	description: Vec<u8>,
}

pub struct CreateInventoryItem {
	agent_data: CreateInventoryItem_AgentData,
	inventory_block: CreateInventoryItem_InventoryBlock,
}


pub struct CreateLandmarkForEvent_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct CreateLandmarkForEvent_EventData {
	event_id: u32,
}

pub struct CreateLandmarkForEvent_InventoryBlock {
	folder_id: LLUUID,
	name: Vec<u8>,
}

pub struct CreateLandmarkForEvent {
	agent_data: CreateLandmarkForEvent_AgentData,
	event_data: CreateLandmarkForEvent_EventData,
	inventory_block: CreateLandmarkForEvent_InventoryBlock,
}


pub struct EventLocationRequest_QueryData {
	query_id: LLUUID,
}

pub struct EventLocationRequest_EventData {
	event_id: u32,
}

pub struct EventLocationRequest {
	query_data: EventLocationRequest_QueryData,
	event_data: EventLocationRequest_EventData,
}


pub struct EventLocationReply_QueryData {
	query_id: LLUUID,
}

pub struct EventLocationReply_EventData {
	success: bool,
	region_id: LLUUID,
	region_pos: Vector3<f32>,
}

pub struct EventLocationReply {
	query_data: EventLocationReply_QueryData,
	event_data: EventLocationReply_EventData,
}


pub struct RegionHandleRequest_RequestBlock {
	region_id: LLUUID,
}

pub struct RegionHandleRequest {
	request_block: RegionHandleRequest_RequestBlock,
}


pub struct RegionIDAndHandleReply_ReplyBlock {
	region_id: LLUUID,
	region_handle: u64,
}

pub struct RegionIDAndHandleReply {
	reply_block: RegionIDAndHandleReply_ReplyBlock,
}


pub struct MoneyTransferRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct MoneyTransferRequest_MoneyData {
	source_id: LLUUID,
	dest_id: LLUUID,
	flags: u8,
	amount: i32,
	aggregate_perm_next_owner: u8,
	aggregate_perm_inventory: u8,
	transaction_type: i32,
	description: Vec<u8>,
}

pub struct MoneyTransferRequest {
	agent_data: MoneyTransferRequest_AgentData,
	money_data: MoneyTransferRequest_MoneyData,
}


pub struct MoneyTransferBackend_MoneyData {
	transaction_id: LLUUID,
	transaction_time: u32,
	source_id: LLUUID,
	dest_id: LLUUID,
	flags: u8,
	amount: i32,
	aggregate_perm_next_owner: u8,
	aggregate_perm_inventory: u8,
	transaction_type: i32,
	region_id: LLUUID,
	grid_x: u32,
	grid_y: u32,
	description: Vec<u8>,
}

pub struct MoneyTransferBackend {
	money_data: MoneyTransferBackend_MoneyData,
}


pub struct MoneyBalanceRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct MoneyBalanceRequest_MoneyData {
	transaction_id: LLUUID,
}

pub struct MoneyBalanceRequest {
	agent_data: MoneyBalanceRequest_AgentData,
	money_data: MoneyBalanceRequest_MoneyData,
}


pub struct MoneyBalanceReply_MoneyData {
	agent_id: LLUUID,
	transaction_id: LLUUID,
	transaction_success: bool,
	money_balance: i32,
	square_meters_credit: i32,
	square_meters_committed: i32,
	description: Vec<u8>,
}

pub struct MoneyBalanceReply_TransactionInfo {
	transaction_type: i32,
	source_id: LLUUID,
	is_source_group: bool,
	dest_id: LLUUID,
	is_dest_group: bool,
	amount: i32,
	item_description: Vec<u8>,
}

pub struct MoneyBalanceReply {
	money_data: MoneyBalanceReply_MoneyData,
	transaction_info: MoneyBalanceReply_TransactionInfo,
}


pub struct RoutedMoneyBalanceReply_TargetBlock {
	target_ip: IpAddr,
	target_port: IpPort,
}

pub struct RoutedMoneyBalanceReply_MoneyData {
	agent_id: LLUUID,
	transaction_id: LLUUID,
	transaction_success: bool,
	money_balance: i32,
	square_meters_credit: i32,
	square_meters_committed: i32,
	description: Vec<u8>,
}

pub struct RoutedMoneyBalanceReply_TransactionInfo {
	transaction_type: i32,
	source_id: LLUUID,
	is_source_group: bool,
	dest_id: LLUUID,
	is_dest_group: bool,
	amount: i32,
	item_description: Vec<u8>,
}

pub struct RoutedMoneyBalanceReply {
	target_block: RoutedMoneyBalanceReply_TargetBlock,
	money_data: RoutedMoneyBalanceReply_MoneyData,
	transaction_info: RoutedMoneyBalanceReply_TransactionInfo,
}


pub struct ActivateGestures_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	flags: u32,
}

pub struct ActivateGestures_Data {
	item_id: LLUUID,
	asset_id: LLUUID,
	gesture_flags: u32,
}

pub struct ActivateGestures {
	agent_data: ActivateGestures_AgentData,
	data: Vec<ActivateGestures_Data>,
}


pub struct DeactivateGestures_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	flags: u32,
}

pub struct DeactivateGestures_Data {
	item_id: LLUUID,
	gesture_flags: u32,
}

pub struct DeactivateGestures {
	agent_data: DeactivateGestures_AgentData,
	data: Vec<DeactivateGestures_Data>,
}


pub struct MuteListUpdate_MuteData {
	agent_id: LLUUID,
	filename: Vec<u8>,
}

pub struct MuteListUpdate {
	mute_data: MuteListUpdate_MuteData,
}


pub struct UseCachedMuteList_AgentData {
	agent_id: LLUUID,
}

pub struct UseCachedMuteList {
	agent_data: UseCachedMuteList_AgentData,
}


pub struct GrantUserRights_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct GrantUserRights_Rights {
	agent_related: LLUUID,
	related_rights: i32,
}

pub struct GrantUserRights {
	agent_data: GrantUserRights_AgentData,
	rights: Vec<GrantUserRights_Rights>,
}


pub struct ChangeUserRights_AgentData {
	agent_id: LLUUID,
}

pub struct ChangeUserRights_Rights {
	agent_related: LLUUID,
	related_rights: i32,
}

pub struct ChangeUserRights {
	agent_data: ChangeUserRights_AgentData,
	rights: Vec<ChangeUserRights_Rights>,
}


pub struct OnlineNotification_AgentBlock {
	agent_id: LLUUID,
}

pub struct OnlineNotification {
	agent_block: Vec<OnlineNotification_AgentBlock>,
}


pub struct OfflineNotification_AgentBlock {
	agent_id: LLUUID,
}

pub struct OfflineNotification {
	agent_block: Vec<OfflineNotification_AgentBlock>,
}


pub struct SetStartLocationRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct SetStartLocationRequest_StartLocationData {
	sim_name: Vec<u8>,
	location_id: u32,
	location_pos: Vector3<f32>,
	location_look_at: Vector3<f32>,
}

pub struct SetStartLocationRequest {
	agent_data: SetStartLocationRequest_AgentData,
	start_location_data: SetStartLocationRequest_StartLocationData,
}


pub struct SetStartLocation_StartLocationData {
	agent_id: LLUUID,
	region_id: LLUUID,
	location_id: u32,
	region_handle: u64,
	location_pos: Vector3<f32>,
	location_look_at: Vector3<f32>,
}

pub struct SetStartLocation {
	start_location_data: SetStartLocation_StartLocationData,
}


pub struct NetTest_NetBlock {
	port: IpPort,
}

pub struct NetTest {
	net_block: NetTest_NetBlock,
}


pub struct SetCPURatio_Data {
	ratio: u8,
}

pub struct SetCPURatio {
	data: SetCPURatio_Data,
}


pub struct SimCrashed_Data {
	region_x: u32,
	region_y: u32,
}

pub struct SimCrashed_Users {
	agent_id: LLUUID,
}

pub struct SimCrashed {
	data: SimCrashed_Data,
	users: Vec<SimCrashed_Users>,
}


pub struct NameValuePair_TaskData {
	id: LLUUID,
}

pub struct NameValuePair_NameValueData {
	nv_pair: Vec<u8>,
}

pub struct NameValuePair {
	task_data: NameValuePair_TaskData,
	name_value_data: Vec<NameValuePair_NameValueData>,
}


pub struct RemoveNameValuePair_TaskData {
	id: LLUUID,
}

pub struct RemoveNameValuePair_NameValueData {
	nv_pair: Vec<u8>,
}

pub struct RemoveNameValuePair {
	task_data: RemoveNameValuePair_TaskData,
	name_value_data: Vec<RemoveNameValuePair_NameValueData>,
}


pub struct UpdateAttachment_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct UpdateAttachment_AttachmentBlock {
	attachment_point: u8,
}

pub struct UpdateAttachment_OperationData {
	add_item: bool,
	use_existing_asset: bool,
}

pub struct UpdateAttachment_InventoryData {
	item_id: LLUUID,
	folder_id: LLUUID,
	creator_id: LLUUID,
	owner_id: LLUUID,
	group_id: LLUUID,
	base_mask: u32,
	owner_mask: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	group_owned: bool,
	asset_id: LLUUID,
	type_: i8,
	inv_type: i8,
	flags: u32,
	sale_type: u8,
	sale_price: i32,
	name: Vec<u8>,
	description: Vec<u8>,
	creation_date: i32,
	crc: u32,
}

pub struct UpdateAttachment {
	agent_data: UpdateAttachment_AgentData,
	attachment_block: UpdateAttachment_AttachmentBlock,
	operation_data: UpdateAttachment_OperationData,
	inventory_data: UpdateAttachment_InventoryData,
}


pub struct RemoveAttachment_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RemoveAttachment_AttachmentBlock {
	attachment_point: u8,
	item_id: LLUUID,
}

pub struct RemoveAttachment {
	agent_data: RemoveAttachment_AgentData,
	attachment_block: RemoveAttachment_AttachmentBlock,
}


pub struct SoundTrigger_SoundData {
	sound_id: LLUUID,
	owner_id: LLUUID,
	object_id: LLUUID,
	parent_id: LLUUID,
	handle: u64,
	position: Vector3<f32>,
	gain: f32,
}

pub struct SoundTrigger {
	sound_data: SoundTrigger_SoundData,
}


pub struct AttachedSound_DataBlock {
	sound_id: LLUUID,
	object_id: LLUUID,
	owner_id: LLUUID,
	gain: f32,
	flags: u8,
}

pub struct AttachedSound {
	data_block: AttachedSound_DataBlock,
}


pub struct AttachedSoundGainChange_DataBlock {
	object_id: LLUUID,
	gain: f32,
}

pub struct AttachedSoundGainChange {
	data_block: AttachedSoundGainChange_DataBlock,
}


pub struct PreloadSound_DataBlock {
	object_id: LLUUID,
	owner_id: LLUUID,
	sound_id: LLUUID,
}

pub struct PreloadSound {
	data_block: Vec<PreloadSound_DataBlock>,
}


pub struct AssetUploadRequest_AssetBlock {
	transaction_id: LLUUID,
	type_: i8,
	tempfile: bool,
	store_local: bool,
	asset_data: Vec<u8>,
}

pub struct AssetUploadRequest {
	asset_block: AssetUploadRequest_AssetBlock,
}


pub struct AssetUploadComplete_AssetBlock {
	uuid: LLUUID,
	type_: i8,
	success: bool,
}

pub struct AssetUploadComplete {
	asset_block: AssetUploadComplete_AssetBlock,
}


pub struct EmailMessageRequest_DataBlock {
	object_id: LLUUID,
	from_address: Vec<u8>,
	subject: Vec<u8>,
}

pub struct EmailMessageRequest {
	data_block: EmailMessageRequest_DataBlock,
}


pub struct EmailMessageReply_DataBlock {
	object_id: LLUUID,
	more: u32,
	time: u32,
	from_address: Vec<u8>,
	subject: Vec<u8>,
	data: Vec<u8>,
	mail_filter: Vec<u8>,
}

pub struct EmailMessageReply {
	data_block: EmailMessageReply_DataBlock,
}


pub struct InternalScriptMail_DataBlock {
	from: Vec<u8>,
	to: LLUUID,
	subject: Vec<u8>,
	body: Vec<u8>,
}

pub struct InternalScriptMail {
	data_block: InternalScriptMail_DataBlock,
}


pub struct ScriptDataRequest_DataBlock {
	hash: u64,
	request_type: i8,
	request: Vec<u8>,
}

pub struct ScriptDataRequest {
	data_block: Vec<ScriptDataRequest_DataBlock>,
}


pub struct ScriptDataReply_DataBlock {
	hash: u64,
	reply: Vec<u8>,
}

pub struct ScriptDataReply {
	data_block: Vec<ScriptDataReply_DataBlock>,
}


pub struct CreateGroupRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct CreateGroupRequest_GroupData {
	name: Vec<u8>,
	charter: Vec<u8>,
	show_in_list: bool,
	insignia_id: LLUUID,
	membership_fee: i32,
	open_enrollment: bool,
	allow_publish: bool,
	mature_publish: bool,
}

pub struct CreateGroupRequest {
	agent_data: CreateGroupRequest_AgentData,
	group_data: CreateGroupRequest_GroupData,
}


pub struct CreateGroupReply_AgentData {
	agent_id: LLUUID,
}

pub struct CreateGroupReply_ReplyData {
	group_id: LLUUID,
	success: bool,
	message: Vec<u8>,
}

pub struct CreateGroupReply {
	agent_data: CreateGroupReply_AgentData,
	reply_data: CreateGroupReply_ReplyData,
}


pub struct UpdateGroupInfo_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct UpdateGroupInfo_GroupData {
	group_id: LLUUID,
	charter: Vec<u8>,
	show_in_list: bool,
	insignia_id: LLUUID,
	membership_fee: i32,
	open_enrollment: bool,
	allow_publish: bool,
	mature_publish: bool,
}

pub struct UpdateGroupInfo {
	agent_data: UpdateGroupInfo_AgentData,
	group_data: UpdateGroupInfo_GroupData,
}


pub struct GroupRoleChanges_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct GroupRoleChanges_RoleChange {
	role_id: LLUUID,
	member_id: LLUUID,
	change: u32,
}

pub struct GroupRoleChanges {
	agent_data: GroupRoleChanges_AgentData,
	role_change: Vec<GroupRoleChanges_RoleChange>,
}


pub struct JoinGroupRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct JoinGroupRequest_GroupData {
	group_id: LLUUID,
}

pub struct JoinGroupRequest {
	agent_data: JoinGroupRequest_AgentData,
	group_data: JoinGroupRequest_GroupData,
}


pub struct JoinGroupReply_AgentData {
	agent_id: LLUUID,
}

pub struct JoinGroupReply_GroupData {
	group_id: LLUUID,
	success: bool,
}

pub struct JoinGroupReply {
	agent_data: JoinGroupReply_AgentData,
	group_data: JoinGroupReply_GroupData,
}


pub struct EjectGroupMemberRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct EjectGroupMemberRequest_GroupData {
	group_id: LLUUID,
}

pub struct EjectGroupMemberRequest_EjectData {
	ejectee_id: LLUUID,
}

pub struct EjectGroupMemberRequest {
	agent_data: EjectGroupMemberRequest_AgentData,
	group_data: EjectGroupMemberRequest_GroupData,
	eject_data: Vec<EjectGroupMemberRequest_EjectData>,
}


pub struct EjectGroupMemberReply_AgentData {
	agent_id: LLUUID,
}

pub struct EjectGroupMemberReply_GroupData {
	group_id: LLUUID,
}

pub struct EjectGroupMemberReply_EjectData {
	success: bool,
}

pub struct EjectGroupMemberReply {
	agent_data: EjectGroupMemberReply_AgentData,
	group_data: EjectGroupMemberReply_GroupData,
	eject_data: EjectGroupMemberReply_EjectData,
}


pub struct LeaveGroupRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct LeaveGroupRequest_GroupData {
	group_id: LLUUID,
}

pub struct LeaveGroupRequest {
	agent_data: LeaveGroupRequest_AgentData,
	group_data: LeaveGroupRequest_GroupData,
}


pub struct LeaveGroupReply_AgentData {
	agent_id: LLUUID,
}

pub struct LeaveGroupReply_GroupData {
	group_id: LLUUID,
	success: bool,
}

pub struct LeaveGroupReply {
	agent_data: LeaveGroupReply_AgentData,
	group_data: LeaveGroupReply_GroupData,
}


pub struct InviteGroupRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct InviteGroupRequest_GroupData {
	group_id: LLUUID,
}

pub struct InviteGroupRequest_InviteData {
	invitee_id: LLUUID,
	role_id: LLUUID,
}

pub struct InviteGroupRequest {
	agent_data: InviteGroupRequest_AgentData,
	group_data: InviteGroupRequest_GroupData,
	invite_data: Vec<InviteGroupRequest_InviteData>,
}


pub struct InviteGroupResponse_InviteData {
	agent_id: LLUUID,
	invitee_id: LLUUID,
	group_id: LLUUID,
	role_id: LLUUID,
	membership_fee: i32,
}

pub struct InviteGroupResponse {
	invite_data: InviteGroupResponse_InviteData,
}


pub struct GroupProfileRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct GroupProfileRequest_GroupData {
	group_id: LLUUID,
}

pub struct GroupProfileRequest {
	agent_data: GroupProfileRequest_AgentData,
	group_data: GroupProfileRequest_GroupData,
}


pub struct GroupProfileReply_AgentData {
	agent_id: LLUUID,
}

pub struct GroupProfileReply_GroupData {
	group_id: LLUUID,
	name: Vec<u8>,
	charter: Vec<u8>,
	show_in_list: bool,
	member_title: Vec<u8>,
	powers_mask: u64,
	insignia_id: LLUUID,
	founder_id: LLUUID,
	membership_fee: i32,
	open_enrollment: bool,
	money: i32,
	group_membership_count: i32,
	group_roles_count: i32,
	allow_publish: bool,
	mature_publish: bool,
	owner_role: LLUUID,
}

pub struct GroupProfileReply {
	agent_data: GroupProfileReply_AgentData,
	group_data: GroupProfileReply_GroupData,
}


pub struct GroupAccountSummaryRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct GroupAccountSummaryRequest_MoneyData {
	request_id: LLUUID,
	interval_days: i32,
	current_interval: i32,
}

pub struct GroupAccountSummaryRequest {
	agent_data: GroupAccountSummaryRequest_AgentData,
	money_data: GroupAccountSummaryRequest_MoneyData,
}


pub struct GroupAccountSummaryReply_AgentData {
	agent_id: LLUUID,
	group_id: LLUUID,
}

pub struct GroupAccountSummaryReply_MoneyData {
	request_id: LLUUID,
	interval_days: i32,
	current_interval: i32,
	start_date: Vec<u8>,
	balance: i32,
	total_credits: i32,
	total_debits: i32,
	object_tax_current: i32,
	light_tax_current: i32,
	land_tax_current: i32,
	group_tax_current: i32,
	parcel_dir_fee_current: i32,
	object_tax_estimate: i32,
	light_tax_estimate: i32,
	land_tax_estimate: i32,
	group_tax_estimate: i32,
	parcel_dir_fee_estimate: i32,
	non_exempt_members: i32,
	last_tax_date: Vec<u8>,
	tax_date: Vec<u8>,
}

pub struct GroupAccountSummaryReply {
	agent_data: GroupAccountSummaryReply_AgentData,
	money_data: GroupAccountSummaryReply_MoneyData,
}


pub struct GroupAccountDetailsRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct GroupAccountDetailsRequest_MoneyData {
	request_id: LLUUID,
	interval_days: i32,
	current_interval: i32,
}

pub struct GroupAccountDetailsRequest {
	agent_data: GroupAccountDetailsRequest_AgentData,
	money_data: GroupAccountDetailsRequest_MoneyData,
}


pub struct GroupAccountDetailsReply_AgentData {
	agent_id: LLUUID,
	group_id: LLUUID,
}

pub struct GroupAccountDetailsReply_MoneyData {
	request_id: LLUUID,
	interval_days: i32,
	current_interval: i32,
	start_date: Vec<u8>,
}

pub struct GroupAccountDetailsReply_HistoryData {
	description: Vec<u8>,
	amount: i32,
}

pub struct GroupAccountDetailsReply {
	agent_data: GroupAccountDetailsReply_AgentData,
	money_data: GroupAccountDetailsReply_MoneyData,
	history_data: Vec<GroupAccountDetailsReply_HistoryData>,
}


pub struct GroupAccountTransactionsRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct GroupAccountTransactionsRequest_MoneyData {
	request_id: LLUUID,
	interval_days: i32,
	current_interval: i32,
}

pub struct GroupAccountTransactionsRequest {
	agent_data: GroupAccountTransactionsRequest_AgentData,
	money_data: GroupAccountTransactionsRequest_MoneyData,
}


pub struct GroupAccountTransactionsReply_AgentData {
	agent_id: LLUUID,
	group_id: LLUUID,
}

pub struct GroupAccountTransactionsReply_MoneyData {
	request_id: LLUUID,
	interval_days: i32,
	current_interval: i32,
	start_date: Vec<u8>,
}

pub struct GroupAccountTransactionsReply_HistoryData {
	time: Vec<u8>,
	user: Vec<u8>,
	type_: i32,
	item: Vec<u8>,
	amount: i32,
}

pub struct GroupAccountTransactionsReply {
	agent_data: GroupAccountTransactionsReply_AgentData,
	money_data: GroupAccountTransactionsReply_MoneyData,
	history_data: Vec<GroupAccountTransactionsReply_HistoryData>,
}


pub struct GroupActiveProposalsRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct GroupActiveProposalsRequest_GroupData {
	group_id: LLUUID,
}

pub struct GroupActiveProposalsRequest_TransactionData {
	transaction_id: LLUUID,
}

pub struct GroupActiveProposalsRequest {
	agent_data: GroupActiveProposalsRequest_AgentData,
	group_data: GroupActiveProposalsRequest_GroupData,
	transaction_data: GroupActiveProposalsRequest_TransactionData,
}


pub struct GroupActiveProposalItemReply_AgentData {
	agent_id: LLUUID,
	group_id: LLUUID,
}

pub struct GroupActiveProposalItemReply_TransactionData {
	transaction_id: LLUUID,
	total_num_items: u32,
}

pub struct GroupActiveProposalItemReply_ProposalData {
	vote_id: LLUUID,
	vote_initiator: LLUUID,
	terse_date_id: Vec<u8>,
	start_date_time: Vec<u8>,
	end_date_time: Vec<u8>,
	already_voted: bool,
	vote_cast: Vec<u8>,
	majority: f32,
	quorum: i32,
	proposal_text: Vec<u8>,
}

pub struct GroupActiveProposalItemReply {
	agent_data: GroupActiveProposalItemReply_AgentData,
	transaction_data: GroupActiveProposalItemReply_TransactionData,
	proposal_data: Vec<GroupActiveProposalItemReply_ProposalData>,
}


pub struct GroupVoteHistoryRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct GroupVoteHistoryRequest_GroupData {
	group_id: LLUUID,
}

pub struct GroupVoteHistoryRequest_TransactionData {
	transaction_id: LLUUID,
}

pub struct GroupVoteHistoryRequest {
	agent_data: GroupVoteHistoryRequest_AgentData,
	group_data: GroupVoteHistoryRequest_GroupData,
	transaction_data: GroupVoteHistoryRequest_TransactionData,
}


pub struct GroupVoteHistoryItemReply_AgentData {
	agent_id: LLUUID,
	group_id: LLUUID,
}

pub struct GroupVoteHistoryItemReply_TransactionData {
	transaction_id: LLUUID,
	total_num_items: u32,
}

pub struct GroupVoteHistoryItemReply_HistoryItemData {
	vote_id: LLUUID,
	terse_date_id: Vec<u8>,
	start_date_time: Vec<u8>,
	end_date_time: Vec<u8>,
	vote_initiator: LLUUID,
	vote_type: Vec<u8>,
	vote_result: Vec<u8>,
	majority: f32,
	quorum: i32,
	proposal_text: Vec<u8>,
}

pub struct GroupVoteHistoryItemReply_VoteItem {
	candidate_id: LLUUID,
	vote_cast: Vec<u8>,
	num_votes: i32,
}

pub struct GroupVoteHistoryItemReply {
	agent_data: GroupVoteHistoryItemReply_AgentData,
	transaction_data: GroupVoteHistoryItemReply_TransactionData,
	history_item_data: GroupVoteHistoryItemReply_HistoryItemData,
	vote_item: Vec<GroupVoteHistoryItemReply_VoteItem>,
}


pub struct StartGroupProposal_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct StartGroupProposal_ProposalData {
	group_id: LLUUID,
	quorum: i32,
	majority: f32,
	duration: i32,
	proposal_text: Vec<u8>,
}

pub struct StartGroupProposal {
	agent_data: StartGroupProposal_AgentData,
	proposal_data: StartGroupProposal_ProposalData,
}


pub struct GroupProposalBallot_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct GroupProposalBallot_ProposalData {
	proposal_id: LLUUID,
	group_id: LLUUID,
	vote_cast: Vec<u8>,
}

pub struct GroupProposalBallot {
	agent_data: GroupProposalBallot_AgentData,
	proposal_data: GroupProposalBallot_ProposalData,
}


pub struct TallyVotes {
}


pub struct GroupMembersRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct GroupMembersRequest_GroupData {
	group_id: LLUUID,
	request_id: LLUUID,
}

pub struct GroupMembersRequest {
	agent_data: GroupMembersRequest_AgentData,
	group_data: GroupMembersRequest_GroupData,
}


pub struct GroupMembersReply_AgentData {
	agent_id: LLUUID,
}

pub struct GroupMembersReply_GroupData {
	group_id: LLUUID,
	request_id: LLUUID,
	member_count: i32,
}

pub struct GroupMembersReply_MemberData {
	agent_id: LLUUID,
	contribution: i32,
	online_status: Vec<u8>,
	agent_powers: u64,
	title: Vec<u8>,
	is_owner: bool,
}

pub struct GroupMembersReply {
	agent_data: GroupMembersReply_AgentData,
	group_data: GroupMembersReply_GroupData,
	member_data: Vec<GroupMembersReply_MemberData>,
}


pub struct ActivateGroup_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct ActivateGroup {
	agent_data: ActivateGroup_AgentData,
}


pub struct SetGroupContribution_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct SetGroupContribution_Data {
	group_id: LLUUID,
	contribution: i32,
}

pub struct SetGroupContribution {
	agent_data: SetGroupContribution_AgentData,
	data: SetGroupContribution_Data,
}


pub struct SetGroupAcceptNotices_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct SetGroupAcceptNotices_Data {
	group_id: LLUUID,
	accept_notices: bool,
}

pub struct SetGroupAcceptNotices_NewData {
	list_in_profile: bool,
}

pub struct SetGroupAcceptNotices {
	agent_data: SetGroupAcceptNotices_AgentData,
	data: SetGroupAcceptNotices_Data,
	new_data: SetGroupAcceptNotices_NewData,
}


pub struct GroupRoleDataRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct GroupRoleDataRequest_GroupData {
	group_id: LLUUID,
	request_id: LLUUID,
}

pub struct GroupRoleDataRequest {
	agent_data: GroupRoleDataRequest_AgentData,
	group_data: GroupRoleDataRequest_GroupData,
}


pub struct GroupRoleDataReply_AgentData {
	agent_id: LLUUID,
}

pub struct GroupRoleDataReply_GroupData {
	group_id: LLUUID,
	request_id: LLUUID,
	role_count: i32,
}

pub struct GroupRoleDataReply_RoleData {
	role_id: LLUUID,
	name: Vec<u8>,
	title: Vec<u8>,
	description: Vec<u8>,
	powers: u64,
	members: u32,
}

pub struct GroupRoleDataReply {
	agent_data: GroupRoleDataReply_AgentData,
	group_data: GroupRoleDataReply_GroupData,
	role_data: Vec<GroupRoleDataReply_RoleData>,
}


pub struct GroupRoleMembersRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct GroupRoleMembersRequest_GroupData {
	group_id: LLUUID,
	request_id: LLUUID,
}

pub struct GroupRoleMembersRequest {
	agent_data: GroupRoleMembersRequest_AgentData,
	group_data: GroupRoleMembersRequest_GroupData,
}


pub struct GroupRoleMembersReply_AgentData {
	agent_id: LLUUID,
	group_id: LLUUID,
	request_id: LLUUID,
	total_pairs: u32,
}

pub struct GroupRoleMembersReply_MemberData {
	role_id: LLUUID,
	member_id: LLUUID,
}

pub struct GroupRoleMembersReply {
	agent_data: GroupRoleMembersReply_AgentData,
	member_data: Vec<GroupRoleMembersReply_MemberData>,
}


pub struct GroupTitlesRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
	request_id: LLUUID,
}

pub struct GroupTitlesRequest {
	agent_data: GroupTitlesRequest_AgentData,
}


pub struct GroupTitlesReply_AgentData {
	agent_id: LLUUID,
	group_id: LLUUID,
	request_id: LLUUID,
}

pub struct GroupTitlesReply_GroupData {
	title: Vec<u8>,
	role_id: LLUUID,
	selected: bool,
}

pub struct GroupTitlesReply {
	agent_data: GroupTitlesReply_AgentData,
	group_data: Vec<GroupTitlesReply_GroupData>,
}


pub struct GroupTitleUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
	title_role_id: LLUUID,
}

pub struct GroupTitleUpdate {
	agent_data: GroupTitleUpdate_AgentData,
}


pub struct GroupRoleUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	group_id: LLUUID,
}

pub struct GroupRoleUpdate_RoleData {
	role_id: LLUUID,
	name: Vec<u8>,
	description: Vec<u8>,
	title: Vec<u8>,
	powers: u64,
	update_type: u8,
}

pub struct GroupRoleUpdate {
	agent_data: GroupRoleUpdate_AgentData,
	role_data: Vec<GroupRoleUpdate_RoleData>,
}


pub struct LiveHelpGroupRequest_RequestData {
	request_id: LLUUID,
	agent_id: LLUUID,
}

pub struct LiveHelpGroupRequest {
	request_data: LiveHelpGroupRequest_RequestData,
}


pub struct LiveHelpGroupReply_ReplyData {
	request_id: LLUUID,
	group_id: LLUUID,
	selection: Vec<u8>,
}

pub struct LiveHelpGroupReply {
	reply_data: LiveHelpGroupReply_ReplyData,
}


pub struct AgentWearablesRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct AgentWearablesRequest {
	agent_data: AgentWearablesRequest_AgentData,
}


pub struct AgentWearablesUpdate_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	serial_num: u32,
}

pub struct AgentWearablesUpdate_WearableData {
	item_id: LLUUID,
	asset_id: LLUUID,
	wearable_type: u8,
}

pub struct AgentWearablesUpdate {
	agent_data: AgentWearablesUpdate_AgentData,
	wearable_data: Vec<AgentWearablesUpdate_WearableData>,
}


pub struct AgentIsNowWearing_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct AgentIsNowWearing_WearableData {
	item_id: LLUUID,
	wearable_type: u8,
}

pub struct AgentIsNowWearing {
	agent_data: AgentIsNowWearing_AgentData,
	wearable_data: Vec<AgentIsNowWearing_WearableData>,
}


pub struct AgentCachedTexture_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	serial_num: i32,
}

pub struct AgentCachedTexture_WearableData {
	id: LLUUID,
	texture_index: u8,
}

pub struct AgentCachedTexture {
	agent_data: AgentCachedTexture_AgentData,
	wearable_data: Vec<AgentCachedTexture_WearableData>,
}


pub struct AgentCachedTextureResponse_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	serial_num: i32,
}

pub struct AgentCachedTextureResponse_WearableData {
	texture_id: LLUUID,
	texture_index: u8,
	host_name: Vec<u8>,
}

pub struct AgentCachedTextureResponse {
	agent_data: AgentCachedTextureResponse_AgentData,
	wearable_data: Vec<AgentCachedTextureResponse_WearableData>,
}


pub struct AgentDataUpdateRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct AgentDataUpdateRequest {
	agent_data: AgentDataUpdateRequest_AgentData,
}


pub struct AgentDataUpdate_AgentData {
	agent_id: LLUUID,
	first_name: Vec<u8>,
	last_name: Vec<u8>,
	group_title: Vec<u8>,
	active_group_id: LLUUID,
	group_powers: u64,
	group_name: Vec<u8>,
}

pub struct AgentDataUpdate {
	agent_data: AgentDataUpdate_AgentData,
}


pub struct GroupDataUpdate_AgentGroupData {
	agent_id: LLUUID,
	group_id: LLUUID,
	agent_powers: u64,
	group_title: Vec<u8>,
}

pub struct GroupDataUpdate {
	agent_group_data: Vec<GroupDataUpdate_AgentGroupData>,
}


pub struct AgentGroupDataUpdate_AgentData {
	agent_id: LLUUID,
}

pub struct AgentGroupDataUpdate_GroupData {
	group_id: LLUUID,
	group_powers: u64,
	accept_notices: bool,
	group_insignia_id: LLUUID,
	contribution: i32,
	group_name: Vec<u8>,
}

pub struct AgentGroupDataUpdate {
	agent_data: AgentGroupDataUpdate_AgentData,
	group_data: Vec<AgentGroupDataUpdate_GroupData>,
}


pub struct AgentDropGroup_AgentData {
	agent_id: LLUUID,
	group_id: LLUUID,
}

pub struct AgentDropGroup {
	agent_data: AgentDropGroup_AgentData,
}


pub struct LogTextMessage_DataBlock {
	from_agent_id: LLUUID,
	to_agent_id: LLUUID,
	global_x: f64,
	global_y: f64,
	time: u32,
	message: Vec<u8>,
}

pub struct LogTextMessage {
	data_block: Vec<LogTextMessage_DataBlock>,
}


pub struct ViewerEffect_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ViewerEffect_Effect {
	id: LLUUID,
	agent_id: LLUUID,
	type_: u8,
	duration: f32,
	color: [u8; 4],
	type_data: Vec<u8>,
}

pub struct ViewerEffect {
	agent_data: ViewerEffect_AgentData,
	effect: Vec<ViewerEffect_Effect>,
}


pub struct CreateTrustedCircuit_DataBlock {
	end_point_id: LLUUID,
	digest: [u8; 32],
}

pub struct CreateTrustedCircuit {
	data_block: CreateTrustedCircuit_DataBlock,
}


pub struct DenyTrustedCircuit_DataBlock {
	end_point_id: LLUUID,
}

pub struct DenyTrustedCircuit {
	data_block: DenyTrustedCircuit_DataBlock,
}


pub struct RequestTrustedCircuit {
}


pub struct RezSingleAttachmentFromInv_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RezSingleAttachmentFromInv_ObjectData {
	item_id: LLUUID,
	owner_id: LLUUID,
	attachment_pt: u8,
	item_flags: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	name: Vec<u8>,
	description: Vec<u8>,
}

pub struct RezSingleAttachmentFromInv {
	agent_data: RezSingleAttachmentFromInv_AgentData,
	object_data: RezSingleAttachmentFromInv_ObjectData,
}


pub struct RezMultipleAttachmentsFromInv_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RezMultipleAttachmentsFromInv_HeaderData {
	compound_msg_id: LLUUID,
	total_objects: u8,
	first_detach_all: bool,
}

pub struct RezMultipleAttachmentsFromInv_ObjectData {
	item_id: LLUUID,
	owner_id: LLUUID,
	attachment_pt: u8,
	item_flags: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	name: Vec<u8>,
	description: Vec<u8>,
}

pub struct RezMultipleAttachmentsFromInv {
	agent_data: RezMultipleAttachmentsFromInv_AgentData,
	header_data: RezMultipleAttachmentsFromInv_HeaderData,
	object_data: Vec<RezMultipleAttachmentsFromInv_ObjectData>,
}


pub struct DetachAttachmentIntoInv_ObjectData {
	agent_id: LLUUID,
	item_id: LLUUID,
}

pub struct DetachAttachmentIntoInv {
	object_data: DetachAttachmentIntoInv_ObjectData,
}


pub struct CreateNewOutfitAttachments_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct CreateNewOutfitAttachments_HeaderData {
	new_folder_id: LLUUID,
}

pub struct CreateNewOutfitAttachments_ObjectData {
	old_item_id: LLUUID,
	old_folder_id: LLUUID,
}

pub struct CreateNewOutfitAttachments {
	agent_data: CreateNewOutfitAttachments_AgentData,
	header_data: CreateNewOutfitAttachments_HeaderData,
	object_data: Vec<CreateNewOutfitAttachments_ObjectData>,
}


pub struct UserInfoRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct UserInfoRequest {
	agent_data: UserInfoRequest_AgentData,
}


pub struct UserInfoReply_AgentData {
	agent_id: LLUUID,
}

pub struct UserInfoReply_UserData {
	im_via_e_mail: bool,
	directory_visibility: Vec<u8>,
	e_mail: Vec<u8>,
}

pub struct UserInfoReply {
	agent_data: UserInfoReply_AgentData,
	user_data: UserInfoReply_UserData,
}


pub struct UpdateUserInfo_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct UpdateUserInfo_UserData {
	im_via_e_mail: bool,
	directory_visibility: Vec<u8>,
}

pub struct UpdateUserInfo {
	agent_data: UpdateUserInfo_AgentData,
	user_data: UpdateUserInfo_UserData,
}


pub struct ParcelRename_ParcelData {
	parcel_id: LLUUID,
	new_name: Vec<u8>,
}

pub struct ParcelRename {
	parcel_data: Vec<ParcelRename_ParcelData>,
}


pub struct InitiateDownload_AgentData {
	agent_id: LLUUID,
}

pub struct InitiateDownload_FileData {
	sim_filename: Vec<u8>,
	viewer_filename: Vec<u8>,
}

pub struct InitiateDownload {
	agent_data: InitiateDownload_AgentData,
	file_data: InitiateDownload_FileData,
}


pub struct SystemMessage_MethodData {
	method: Vec<u8>,
	invoice: LLUUID,
	digest: [u8; 32],
}

pub struct SystemMessage_ParamList {
	parameter: Vec<u8>,
}

pub struct SystemMessage {
	method_data: SystemMessage_MethodData,
	param_list: Vec<SystemMessage_ParamList>,
}


pub struct MapLayerRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	flags: u32,
	estate_id: u32,
	godlike: bool,
}

pub struct MapLayerRequest {
	agent_data: MapLayerRequest_AgentData,
}


pub struct MapLayerReply_AgentData {
	agent_id: LLUUID,
	flags: u32,
}

pub struct MapLayerReply_LayerData {
	left: u32,
	right: u32,
	top: u32,
	bottom: u32,
	image_id: LLUUID,
}

pub struct MapLayerReply {
	agent_data: MapLayerReply_AgentData,
	layer_data: Vec<MapLayerReply_LayerData>,
}


pub struct MapBlockRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	flags: u32,
	estate_id: u32,
	godlike: bool,
}

pub struct MapBlockRequest_PositionData {
	min_x: u16,
	max_x: u16,
	min_y: u16,
	max_y: u16,
}

pub struct MapBlockRequest {
	agent_data: MapBlockRequest_AgentData,
	position_data: MapBlockRequest_PositionData,
}


pub struct MapNameRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	flags: u32,
	estate_id: u32,
	godlike: bool,
}

pub struct MapNameRequest_NameData {
	name: Vec<u8>,
}

pub struct MapNameRequest {
	agent_data: MapNameRequest_AgentData,
	name_data: MapNameRequest_NameData,
}


pub struct MapBlockReply_AgentData {
	agent_id: LLUUID,
	flags: u32,
}

pub struct MapBlockReply_Data {
	x: u16,
	y: u16,
	name: Vec<u8>,
	access: u8,
	region_flags: u32,
	water_height: u8,
	agents: u8,
	map_image_id: LLUUID,
}

pub struct MapBlockReply {
	agent_data: MapBlockReply_AgentData,
	data: Vec<MapBlockReply_Data>,
}


pub struct MapItemRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	flags: u32,
	estate_id: u32,
	godlike: bool,
}

pub struct MapItemRequest_RequestData {
	item_type: u32,
	region_handle: u64,
}

pub struct MapItemRequest {
	agent_data: MapItemRequest_AgentData,
	request_data: MapItemRequest_RequestData,
}


pub struct MapItemReply_AgentData {
	agent_id: LLUUID,
	flags: u32,
}

pub struct MapItemReply_RequestData {
	item_type: u32,
}

pub struct MapItemReply_Data {
	x: u32,
	y: u32,
	id: LLUUID,
	extra: i32,
	extra2: i32,
	name: Vec<u8>,
}

pub struct MapItemReply {
	agent_data: MapItemReply_AgentData,
	request_data: MapItemReply_RequestData,
	data: Vec<MapItemReply_Data>,
}


pub struct SendPostcard_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
	asset_id: LLUUID,
	pos_global: Vector3<f64>,
	to: Vec<u8>,
	from: Vec<u8>,
	name: Vec<u8>,
	subject: Vec<u8>,
	msg: Vec<u8>,
	allow_publish: bool,
	mature_publish: bool,
}

pub struct SendPostcard {
	agent_data: SendPostcard_AgentData,
}


pub struct RpcChannelRequest_DataBlock {
	grid_x: u32,
	grid_y: u32,
	task_id: LLUUID,
	item_id: LLUUID,
}

pub struct RpcChannelRequest {
	data_block: RpcChannelRequest_DataBlock,
}


pub struct RpcChannelReply_DataBlock {
	task_id: LLUUID,
	item_id: LLUUID,
	channel_id: LLUUID,
}

pub struct RpcChannelReply {
	data_block: RpcChannelReply_DataBlock,
}


pub struct RpcScriptRequestInbound_TargetBlock {
	grid_x: u32,
	grid_y: u32,
}

pub struct RpcScriptRequestInbound_DataBlock {
	task_id: LLUUID,
	item_id: LLUUID,
	channel_id: LLUUID,
	int_value: u32,
	string_value: Vec<u8>,
}

pub struct RpcScriptRequestInbound {
	target_block: RpcScriptRequestInbound_TargetBlock,
	data_block: RpcScriptRequestInbound_DataBlock,
}


pub struct RpcScriptRequestInboundForward_DataBlock {
	rpc_server_ip: IpAddr,
	rpc_server_port: IpPort,
	task_id: LLUUID,
	item_id: LLUUID,
	channel_id: LLUUID,
	int_value: u32,
	string_value: Vec<u8>,
}

pub struct RpcScriptRequestInboundForward {
	data_block: RpcScriptRequestInboundForward_DataBlock,
}


pub struct RpcScriptReplyInbound_DataBlock {
	task_id: LLUUID,
	item_id: LLUUID,
	channel_id: LLUUID,
	int_value: u32,
	string_value: Vec<u8>,
}

pub struct RpcScriptReplyInbound {
	data_block: RpcScriptReplyInbound_DataBlock,
}


pub struct ScriptMailRegistration_DataBlock {
	target_ip: Vec<u8>,
	target_port: IpPort,
	task_id: LLUUID,
	flags: u32,
}

pub struct ScriptMailRegistration {
	data_block: ScriptMailRegistration_DataBlock,
}


pub struct ParcelMediaCommandMessage_CommandBlock {
	flags: u32,
	command: u32,
	time: f32,
}

pub struct ParcelMediaCommandMessage {
	command_block: ParcelMediaCommandMessage_CommandBlock,
}


pub struct ParcelMediaUpdate_DataBlock {
	media_url: Vec<u8>,
	media_id: LLUUID,
	media_auto_scale: u8,
}

pub struct ParcelMediaUpdate_DataBlockExtended {
	media_type: Vec<u8>,
	media_desc: Vec<u8>,
	media_width: i32,
	media_height: i32,
	media_loop: u8,
}

pub struct ParcelMediaUpdate {
	data_block: ParcelMediaUpdate_DataBlock,
	data_block_extended: ParcelMediaUpdate_DataBlockExtended,
}


pub struct LandStatRequest_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct LandStatRequest_RequestData {
	report_type: u32,
	request_flags: u32,
	filter: Vec<u8>,
	parcel_local_id: i32,
}

pub struct LandStatRequest {
	agent_data: LandStatRequest_AgentData,
	request_data: LandStatRequest_RequestData,
}


pub struct LandStatReply_RequestData {
	report_type: u32,
	request_flags: u32,
	total_object_count: u32,
}

pub struct LandStatReply_ReportData {
	task_local_id: u32,
	task_id: LLUUID,
	location_x: f32,
	location_y: f32,
	location_z: f32,
	score: f32,
	task_name: Vec<u8>,
	owner_name: Vec<u8>,
}

pub struct LandStatReply {
	request_data: LandStatReply_RequestData,
	report_data: Vec<LandStatReply_ReportData>,
}


pub struct Error_AgentData {
	agent_id: LLUUID,
}

pub struct Error_Data {
	code: i32,
	token: Vec<u8>,
	id: LLUUID,
	system: Vec<u8>,
	message: Vec<u8>,
	data: Vec<u8>,
}

pub struct Error {
	agent_data: Error_AgentData,
	data: Error_Data,
}


pub struct ObjectIncludeInSearch_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct ObjectIncludeInSearch_ObjectData {
	object_local_id: u32,
	include_in_search: bool,
}

pub struct ObjectIncludeInSearch {
	agent_data: ObjectIncludeInSearch_AgentData,
	object_data: Vec<ObjectIncludeInSearch_ObjectData>,
}


pub struct RezRestoreToWorld_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct RezRestoreToWorld_InventoryData {
	item_id: LLUUID,
	folder_id: LLUUID,
	creator_id: LLUUID,
	owner_id: LLUUID,
	group_id: LLUUID,
	base_mask: u32,
	owner_mask: u32,
	group_mask: u32,
	everyone_mask: u32,
	next_owner_mask: u32,
	group_owned: bool,
	transaction_id: LLUUID,
	type_: i8,
	inv_type: i8,
	flags: u32,
	sale_type: u8,
	sale_price: i32,
	name: Vec<u8>,
	description: Vec<u8>,
	creation_date: i32,
	crc: u32,
}

pub struct RezRestoreToWorld {
	agent_data: RezRestoreToWorld_AgentData,
	inventory_data: RezRestoreToWorld_InventoryData,
}


pub struct LinkInventoryItem_AgentData {
	agent_id: LLUUID,
	session_id: LLUUID,
}

pub struct LinkInventoryItem_InventoryBlock {
	callback_id: u32,
	folder_id: LLUUID,
	transaction_id: LLUUID,
	old_item_id: LLUUID,
	type_: i8,
	inv_type: i8,
	name: Vec<u8>,
	description: Vec<u8>,
}

pub struct LinkInventoryItem {
	agent_data: LinkInventoryItem_AgentData,
	inventory_block: LinkInventoryItem_InventoryBlock,
}


